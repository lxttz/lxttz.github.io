<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Arlos Blog World🥝</title>
  
  
  <link href="https://lxttz.github.io/atom.xml" rel="self"/>
  
  <link href="https://lxttz.github.io/"/>
  <updated>2025-03-11T10:07:13.772Z</updated>
  <id>https://lxttz.github.io/</id>
  
  <author>
    <name>阿洛博客世界🥝</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GitHub获取个人访问令牌（PAT）</title>
    <link href="https://lxttz.github.io/posts/671aa288.html"/>
    <id>https://lxttz.github.io/posts/671aa288.html</id>
    <published>2025-03-11T10:05:19.000Z</published>
    <updated>2025-03-11T10:07:13.772Z</updated>
    
    <content type="html"><![CDATA[<h3 id="🤖-Assistant">🤖 Assistant</h3><h1>🔑 GitHub 获取个人访问令牌（PAT）全流程指南</h1><h2 id="🌐-1-登录-GitHub-账户">🌐 1. 登录 GitHub 账户</h2><ul><li>访问 <a href="https://github.com/">GitHub 官网</a></li><li>👉 点击右上角 “Sign in” 登录账户</li><li>🔒 推荐开启两步验证（<a href="https://github.com/settings/security">设置路径</a>）</li></ul><h2 id="⚙️-2-进入开发者设置">⚙️ 2. 进入开发者设置</h2><ol><li>点击右上角头像 → <strong>Settings</strong></li><li>左侧导航栏定位 → <strong>Developer settings</strong></li><li>选择 ▶️ <strong>Personal access tokens</strong> → <strong>Tokens (classic)</strong></li></ol><h2 id="🛠️-3-创建新令牌">🛠️ 3. 创建新令牌</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    A[开始] --&gt; B[命名令牌]</span><br><span class="line">    B --&gt; C[设置有效期]</span><br><span class="line">    C --&gt; D[配置权限]</span><br><span class="line">    D --&gt; E[生成令牌]</span><br></pre></td></tr></table></figure><h2 id="🔐-4-核心参数配置（带图标说明）">🔐 4. 核心参数配置（带图标说明）</h2><table><thead><tr><th>配置项</th><th>选项说明</th><th>推荐设置</th></tr></thead><tbody><tr><td><strong>🔖 名称</strong></td><td>识别用途的标识名称</td><td><code>gicnuo_2024PAT</code></td></tr><tr><td><strong>📅 有效期</strong></td><td>最长可设置365天</td><td>选择自定义日期</td></tr><tr><td><strong>📂 仓库权限</strong></td><td><code>repo</code>全库或指定库</td><td>✅ 全库访问</td></tr><tr><td><strong>👥 账户权限</strong></td><td><code>user</code>可操作账户设置</td><td>❌ 默认关闭</td></tr></tbody></table><h3 id="权限详细说明">权限详细说明</h3><ul><li><strong>repo</strong>（必选）<ul><li>✅ <code>repo:status</code></li><li>✅ <code>repo_deployment</code></li><li>✅ <code>public_repo</code>（公开库访问）</li></ul></li><li><strong>admin</strong>（高危操作）<ul><li>❗ <code>repo:delete</code>（删除仓库权限）</li><li>❗ <code>admin:org</code>（组织管理权限）</li></ul></li></ul><h2 id="⚠️-5-令牌安全警告">⚠️ 5. 令牌安全警告</h2><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- 生成后应立即保存至密码管理器！</span></span><br><span class="line"><span class="deletion">- 泄露的令牌可能导致账户被完全控制！</span></span><br><span class="line"><span class="addition">+ 建议使用1Password/Bitwarden等工具加密存储</span></span><br></pre></td></tr></table></figure><h2 id="📋-6-使用场景示例">📋 6. 使用场景示例</h2><table><thead><tr><th>使用场景</th><th>CLI命令示例</th><th>权限要求</th></tr></thead><tbody><tr><td>克隆私有库</td><td><code>git clone https://&lt;TOKEN&gt;@github.com/user/repo.git</code></td><td>repo</td></tr><tr><td>API调用</td><td><code>curl -H &quot;Authorization: Bearer &lt;TOKEN&gt;&quot; https://api.github.com/user</code></td><td>user</td></tr><tr><td>CI/CD集成</td><td>在GitHub Actions中设为<code>secrets.GH_TOKEN</code></td><td>repo + workflow</td></tr></tbody></table><h2 id="🔄-7-管理令牌方法">🔄 7. 管理令牌方法</h2><ol><li><strong>禁用令牌</strong>：开发者设置中点击令牌右侧的🔄按钮</li><li><strong>监控日志</strong>：<a href="https://github.com/settings/security-log">审计日志查看</a></li><li><strong>紧急撤销</strong>：进入页面立即点击❌撤销按钮</li></ol><blockquote><p>💡 TIPS：结合<a href="https://cli.github.com/">GitHub CLI</a> 使用更安全：<br><code>gh auth login --with-token &lt; mytoken.txt</code></p></blockquote><h2 id="流程图解全流程">流程图解全流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    用户-&gt;&gt;GitHub: 登录账户</span><br><span class="line">    用户-&gt;&gt;GitHub: 进入开发者设置</span><br><span class="line">    GitHub--&gt;&gt;用户: 显示PAT创建界面</span><br><span class="line">    用户-&gt;&gt;GitHub: 配置令牌参数</span><br><span class="line">    GitHub--&gt;&gt;用户: 生成加密令牌</span><br><span class="line">    用户-&gt;&gt;本地: 保存至安全位置</span><br></pre></td></tr></table></figure><p><strong><a href="#-github-%E8%8E%B7%E5%8F%96%E4%B8%AA%E4%BA%BA%E8%AE%BF%E9%97%AE%E4%BB%A4%E7%89%8Cpat%E5%85%A8%E6%B5%81%E7%A8%8B%E6%8C%87%E5%8D%97">⬆️ 返回顶部</a></strong><br><strong><a href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens">📚 官方文档参考</a></strong></p><pre><code>&gt; ✨ 最佳实践建议：  &gt; - 为不同用途创建独立令牌（如`CI_PAT`/`API_PAT`）  &gt; - 定期使用[GitHub Token Scanner](https://github.com/github/token-scan)检查代码中的令牌泄露  &gt; - 企业用户建议使用[OAuth Apps](https://docs.github.com/en/developers/apps/getting-started-with-apps/about-apps)代替PAT</code></pre>]]></content>
    
    
    <summary type="html">GitHub获取个人访问令牌（PAT）</summary>
    
    
    
    <category term="GitHub技巧" scheme="https://lxttz.github.io/categories/GitHub%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="GitHub" scheme="https://lxttz.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>ai话术指南</title>
    <link href="https://lxttz.github.io/posts/5a4cdc93.html"/>
    <id>https://lxttz.github.io/posts/5a4cdc93.html</id>
    <published>2025-03-11T10:00:54.000Z</published>
    <updated>2025-03-11T10:07:13.769Z</updated>
    
    <content type="html"><![CDATA[<h1>ai话术</h1><h2 id="1-爬取网址内容">1.爬取网址内容</h2><p>网址+将该网页的内容拷贝下来，整理总结最后以markdown的文件格式输出</p><h2 id="2-梳理内容笔记">2.梳理内容笔记</h2><p>整理以上最后以markdown的文件格式输出，加上每一给平台的网址，标题加上一些小图标</p>]]></content>
    
    
    <summary type="html">ai话术指南</summary>
    
    
    
    <category term="ai" scheme="https://lxttz.github.io/categories/ai/"/>
    
    
    <category term="ai话术" scheme="https://lxttz.github.io/tags/ai%E8%AF%9D%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>免费好用的网站托管平台全面对比</title>
    <link href="https://lxttz.github.io/posts/78b95e04.html"/>
    <id>https://lxttz.github.io/posts/78b95e04.html</id>
    <published>2025-03-11T09:57:02.000Z</published>
    <updated>2025-03-11T09:59:23.186Z</updated>
    
    <content type="html"><![CDATA[<h3 id="🤖-Assistant">🤖 Assistant</h3><h1>🌐 免费好用的静态网页托管平台全面对比介绍</h1><h2 id="🚀-5大免费静态托管平台对比（附官方链接）">🚀 5大免费静态托管平台对比（附官方链接）</h2><h3 id="1-GitHub-Pages-🐙-→-官网">1. GitHub Pages 🐙 <a href="https://pages.github.com/">→ 官网</a></h3><ul><li><strong>特点优势</strong><br><img src="https://img.shields.io/badge/-%E6%8E%A8%E8%8D%90%E7%BB%99%E5%BC%80%E5%8F%91%E8%80%85-blue?logo=github" alt="GitHub Pages"><ul><li>完全免费，无需信用卡</li><li>直接与GitHub仓库关联</li><li>支持自定义域名+HTTPS</li><li>托管地址：<code>username.github.io</code></li></ul></li></ul><h3 id="2-Netlify-🚀-→-官网">2. Netlify 🚀 <a href="https://www.netlify.com/">→ 官网</a></h3><ul><li><strong>创新功能</strong><br><img src="https://img.shields.io/badge/-%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2-green?logo=netlify" alt="Netlify"><ul><li>全球50+CDN节点</li><li>免费Serverless函数</li><li>即时预览部署</li><li>特色功能：表单处理、A/B测试</li></ul></li></ul><h3 id="3-Vercel-⚡-→-官网">3. Vercel ⚡ <a href="https://vercel.com/">→ 官网</a></h3><ul><li><strong>框架优化</strong><br><img src="https://img.shields.io/badge/-%E5%89%8D%E7%AB%AF%E9%A6%96%E9%80%89-purple?logo=vercel" alt="Vercel"><ul><li>Next.js官方推荐</li><li>边缘网络渲染(Edge Network)</li><li>实时协作部署</li><li>测试地址：<code>project-name.vercel.app</code></li></ul></li></ul><h3 id="4-Cloudflare-Pages-🛡️-→-官网">4. Cloudflare Pages 🛡️ <a href="https://pages.cloudflare.com/">→ 官网</a></h3><ul><li><strong>安全加速</strong><br><img src="https://img.shields.io/badge/-%E5%85%A8%E7%90%83%E8%A6%86%E7%9B%96-orange?logo=cloudflare" alt="Cloudflare"><ul><li>250+全球CDN节点</li><li>免费DDoS防护</li><li>Workers脚本支持</li><li>特色：无限带宽+无限请求</li></ul></li></ul><h3 id="5-Firebase-Hosting-🔥-→-官网">5. Firebase Hosting 🔥 <a href="https://firebase.google.com/products/hosting">→ 官网</a></h3><ul><li><strong>全栈生态</strong><br><img src="https://img.shields.io/badge/-%E8%B0%B7%E6%AD%8C%E7%94%9F%E6%80%81-red?logo=firebase" alt="Firebase"><ul><li>深度整合数据库/认证</li><li>实时数据更新</li><li>全球Google CDN</li><li>部署命令：<code>firebase deploy</code></li></ul></li></ul><h2 id="📊-关键参数对比表">📊 关键参数对比表</h2><table><thead><tr><th>平台</th><th>免费CDN节点</th><th>国内访问优化</th><th>特色功能</th><th>部署速度</th></tr></thead><tbody><tr><td>GitHub Pages</td><td>🌍 12</td><td>❌</td><td>开源整合</td><td>⏱️ 中</td></tr><tr><td>Netlify</td><td>🌐 58+</td><td>✔️</td><td>表单处理+自动化</td><td>⚡ 快</td></tr><tr><td>Vercel</td><td>⚡ 30+</td><td>✔️</td><td>边缘渲染+预览环境</td><td>🚀 极快</td></tr><tr><td>Cloudflare Pages</td><td>🌎 250+</td><td>⚠️ 波动</td><td>DDoS防护+Workers</td><td>🌩️ 快</td></tr><tr><td>Firebase Hosting</td><td>🔥 70+</td><td>❌</td><td>实时数据库整合</td><td>⏳ 中等</td></tr></tbody></table><h2 id="🛠️-部署流程示意图">🛠️ 部署流程示意图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[选择平台] --&gt; B&#123;是否需要框架?&#125;</span><br><span class="line">    B --&gt;|是| C[Vercel/Netlify]</span><br><span class="line">    B --&gt;|否| D[GitHub Pages]</span><br><span class="line">    C --&gt; E[连接Git仓库]</span><br><span class="line">    D --&gt; F[上传代码]</span><br><span class="line">    E --&gt; G[自动部署]</span><br><span class="line">    F --&gt; H[手动部署]</span><br></pre></td></tr></table></figure><h2 id="💡-选择建议">💡 选择建议</h2><ul><li><strong>个人博客/文档</strong> → GitHub Pages</li><li><strong>企业官网</strong> → Cloudflare Pages</li><li><strong>前端框架项目</strong> → Vercel</li><li><strong>全栈应用</strong> → Firebase</li><li><strong>自动化需求</strong> → Netlify</li></ul><blockquote><p>📌 注意：国内用户推荐搭配<a href="https://www.aliyun.com/">阿里云</a>或<a href="https://cloud.tencent.com/">腾讯云</a>CDN加速使用</p></blockquote><p>附：<a href="https://web.dev/performance-scoring/">完整测试报告</a> | <a href="https://www.cdnplanet.com/">全球CDN节点查询</a></p><pre><code></code></pre>]]></content>
    
    
    <summary type="html">免费好用的网站托管平台全面对比</summary>
    
    
    
    <category term="博客" scheme="https://lxttz.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="网站托管平台" scheme="https://lxttz.github.io/tags/%E7%BD%91%E7%AB%99%E6%89%98%E7%AE%A1%E5%B9%B3%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>Trae-CN的入门笔记</title>
    <link href="https://lxttz.github.io/posts/a4c8ee63.html"/>
    <id>https://lxttz.github.io/posts/a4c8ee63.html</id>
    <published>2025-03-10T14:34:44.000Z</published>
    <updated>2025-03-10T14:46:17.420Z</updated>
    
    <content type="html"><![CDATA[<h3 id="🤖-Assistant">🤖 Assistant</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Trae 使用文档</span></span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; 本文档基于 [<span class="string">Trae 官方文档</span>](<span class="link">https://docs.trae.com.cn/docs/what-is-trae?_lang=zh</span>) 整理</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 什么是 Trae ?</span></span><br><span class="line"></span><br><span class="line">（描述 Trae 的核心功能，例如：轻量级 HTTP 客户端、特性亮点等）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">## 主要特性</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 🚀 简洁易用的 API 设计</span><br><span class="line"><span class="bullet">-</span> 🔧 请求/响应拦截器</span><br><span class="line"><span class="bullet">-</span> ⚡ 自动转换 JSON 数据</span><br><span class="line"><span class="bullet">-</span> 🔒 支持 TypeScript 类型推断</span><br><span class="line"><span class="bullet">-</span> 🌐 浏览器与 Node.js 双环境支持</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">## 安装方式</span></span><br><span class="line"></span><br><span class="line"><span class="section">### NPM</span></span><br><span class="line"><span class="code">```bash</span></span><br><span class="line"><span class="code">npm install trae</span></span><br></pre></td></tr></table></figure><h3 id="CDN">CDN</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/trae/dist/trae.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="快速入门">快速入门</h2><h3 id="创建实例">创建实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> trae <span class="keyword">from</span> <span class="string">&#x27;trae&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> api = trae.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseUrl</span>: <span class="string">&#x27;https://api.example.com/v1&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="发起请求">发起请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GET 请求</span></span><br><span class="line">api.<span class="title function_">get</span>(<span class="string">&#x27;/users&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(error));</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST 请求</span></span><br><span class="line">api.<span class="title function_">post</span>(<span class="string">&#x27;/users&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">28</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="API-参考">API 参考</h2><h3 id="请求方法">请求方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">trae.<span class="title function_">get</span>(url[, config])</span><br><span class="line">trae.<span class="title function_">post</span>(url, data[, config])</span><br><span class="line">trae.<span class="title function_">put</span>(url, data[, config])</span><br><span class="line">trae.<span class="title function_">delete</span>(url[, config])</span><br></pre></td></tr></table></figure><h3 id="配置项">配置项</h3><table><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td><code>baseUrl</code></td><td>string</td><td><code>''</code></td><td>基础请求路径</td></tr><tr><td><code>headers</code></td><td>object</td><td><code>&#123;&#125;</code></td><td>自定义请求头</td></tr><tr><td><code>timeout</code></td><td>number</td><td><code>0</code></td><td>请求超时时间</td></tr></tbody></table><h2 id="拦截器">拦截器</h2><h3 id="请求拦截">请求拦截</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">api.<span class="title function_">before</span>(<span class="function">(<span class="params">request</span>) =&gt;</span> &#123;</span><br><span class="line">  request.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="string">&#x27;Bearer token&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> request;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="响应拦截">响应拦截</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">api.<span class="title function_">after</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Received response:&#x27;</span>, response);</span><br><span class="line">  <span class="keyword">return</span> response;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="错误处理">错误处理</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">api.<span class="title function_">get</span>(<span class="string">&#x27;/error-endpoint&#x27;</span>)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (error.<span class="property">response</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器响应错误:&#x27;</span>, error.<span class="property">status</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求未发出:&#x27;</span>, error.<span class="property">message</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h2 id="常见问题">常见问题</h2><h3 id="如何取消请求？">如何取消请求？</h3><p>（解决方案说明）</p><h2 id="版本日志">版本日志</h2><ul><li><strong>v1.0.0</strong> (2023-01-01)<ul><li>初始版本发布</li></ul></li></ul><pre><code>---如需提供更准确的内容，请分享原始文档文本内容，我将帮助进行结构化转换。</code></pre>]]></content>
    
    
    <summary type="html">Trae-CN的入门笔记，描述 Trae 的核心功能，例如：轻量级 HTTP 客户端、特性亮点等</summary>
    
    
    
    <category term="ai编码" scheme="https://lxttz.github.io/categories/ai%E7%BC%96%E7%A0%81/"/>
    
    
    <category term="Trae" scheme="https://lxttz.github.io/tags/Trae/"/>
    
  </entry>
  
  <entry>
    <title>springboot部署的问题</title>
    <link href="https://lxttz.github.io/posts/a8a2f7d9.html"/>
    <id>https://lxttz.github.io/posts/a8a2f7d9.html</id>
    <published>2025-03-05T06:15:23.000Z</published>
    <updated>2025-03-10T06:25:04.225Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试!" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="0711ed4248488eceeb6904dccfab71453f9f9ed3c7f45e853f44faa9239b55c8">a225aaeba5e546997ae504eef50c65098cfaf87e21dc646b884b2732baa4a48041e58e0e9400582ce53dae2a4c9b74e1e14e9f5eafdb0fa96b8c20b1da8401ced4d5928e3f008e68be32ac8789fc89b614a44063cea93332a0a9df57b10732930204f8d909cccf1bf1dcc1ae4a30d4dee4d738886cc11e6ea2002a608be0d11c53baec3dbc71a992fe590d1f59da6a990b863730853639f5a028483b2478010655c3bd1ef662d242c04e1ef82e46855bab5540f8714d0879a9c9f69d1424ec9c2f47b68ca61410a6f0f65daa1c2596b3202a9031ffccff3a886b5642e82074c78954443063b8ec5f0b102859894b22be7f2cbdd39bd569f320e337b29f9a92ecc86b149fe0cc56434fdf70ab7584b8baeec75ababe711365ee289d5655b9f290ac0f0874941188d732f80ee6827060f92904f94d719329f1b4a4be5f55a7d9fd371c4d814840b151f2ac50f29a859fee01801b96865da759d89ea3d5fde1296167fa943cac752d8db68ea30fba9d7aacbdd0b6c9e247a02cf738d9174a35cd123262430e07ad90a0fd5c81681c78e3630ddc0fb5d8649561e6dd0420fbb5229eb680e6fb48115daed56286f2b02bd4160eea76dafca65d6ccc1da44fb874a0ee5408cdc27604edaab0fa7863a92edb60314ba79d1c72f8c8206097107aadf3442cd0ba0db5339a2e087ac3cf798182c3bcbea14f1b80af827b818b4f40f5b2700161c213a87e0b83968a5632b9c82465241dd23bf32ede266d96e2bc5bd56d1e49845c03c0ff3e3846b953217d5e3b49bd783473fa3b46b2c5be49f766fa93283e6e038b4144bef3897df01873ca37fd5bc37da9fa573d858663d979676c9a79ba122a260428e3468a7e697995853ed83179b95dad0dde676dfee89b64ee66717bc117c932989d8ec096507619802c2afc4714e8af257587fdf6d9d175318af2227c306eb731bd65ea3ff02bd203393733e0d37b304868a996dea3f4074537a2a9c239d431c898937d3d1dd6c58587d450032a500d31c42aa44a56712c79b85323b1328c08d70b404cd2c7ef101aa053d666a3d0e764345c88ff8aa5a89e4b4f67147b250c49ffdf81dbb2c5938b4e2f172b5070d71e2ac98cbc55ff40c2d88b68023b8fea5c17362beb4a8c79c8bd5736e8b49d29fd09e7c0697ab9d5e71194643f28be9c8fa66066a82033882ec24d527439b8bad46136779f10d1da48d464b33ec2d4126a2cba0cc61293486950bb536174b36413c01be65dc2faef8740ea04da8e0bf0aaef1c58dcce39a17af8fe50928aac0ba552d496218dfdf3c1983d9367d522be1c04b108a03e0aee9d9119c958016d87cd868d6375adaf284b18542e2708c904c94e3fdbfbb9a30883b5381aefe85027f43884006fd5f3e539b99e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">springboot部署的问题，需要密码才能进入!</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">springboot部署的问题</summary>
    
    
    
    <category term="专升本" scheme="https://lxttz.github.io/categories/%E4%B8%93%E5%8D%87%E6%9C%AC/"/>
    
    
    <category term="专升本自我介绍" scheme="https://lxttz.github.io/tags/%E4%B8%93%E5%8D%87%E6%9C%AC%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/"/>
    
  </entry>
  
  <entry>
    <title>vue神秘的代码</title>
    <link href="https://lxttz.github.io/posts/662a14d2.html"/>
    <id>https://lxttz.github.io/posts/662a14d2.html</id>
    <published>2025-03-01T07:24:07.000Z</published>
    <updated>2025-03-13T13:23:27.480Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试!" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ff3cdd1ad9f2a27bda127694b09f3a067eafb69b7bcf2ae488f2c91cd01f3211"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">vue神秘的代码哦，需要密码才能进入!</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">vue神秘的代码</summary>
    
    
    
    <category term="课程" scheme="https://lxttz.github.io/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    <category term="个人" scheme="https://lxttz.github.io/categories/%E8%AF%BE%E7%A8%8B/%E4%B8%AA%E4%BA%BA/"/>
    
    
    <category term="专升本自我介绍" scheme="https://lxttz.github.io/tags/%E4%B8%93%E5%8D%87%E6%9C%AC%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/"/>
    
  </entry>
  
  <entry>
    <title>Java神秘的程序</title>
    <link href="https://lxttz.github.io/posts/4e140152.html"/>
    <id>https://lxttz.github.io/posts/4e140152.html</id>
    <published>2025-03-01T07:19:55.000Z</published>
    <updated>2025-03-10T06:25:00.982Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试!" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="9983e0e8cc6ff431a73d9300e0d1513ecd7f315d0edf2ba5151dc8080678d554">a225aaeba5e546997ae504eef50c65096227d8ca74c841568f7bd6e3c5f8178a88d5d786ea7fdf7e722f32d4d2a83ed15cbb96cc8e1a881367d32b190f8c39a744d53c7add211a43a319845bfd5228598f2140f09b56ead63100efdbaa841df16c45db00ba4fb821ce30cde0b0cac2cfa291ca02da72fa7956b77c5c23593a0365b6b0a24dd5e2dbb1de7324175d6f670e196630ffd61ddb478a77ed032424510fa18289500cca957e6d08c6fef3584e2d9e1363276f47a39e53759b148f64b1165d9f8608662194d8ec858a838645c60f72efba3866632bbd995ba4684ab20147fcf04d3a7715878b922c6ec731c043c0ddf61362c90b947bb67c74023286d10b776ef760396ea32eb313c052ab37f7f1673a7a8ebdab72d2a541b99282991141e216132fce287b1125cfee941891c95e7a2bdbfa1e937245186432d81e641230c5e8014dae64fee9a8f1f7dea51c5e1d8bf9c4a0baaf75452c2786ef141f3115fbd2bc11bc972f1cfe21dc7b631eda93f676efc2ea3ce1ec262dd3b0b9937819efe44d561bc322d18acb0b74f0f8fb389d0bc14986f3f25969397652c063ec3eb1a4363834f3980a13a04fcaa077508ff986131ad254f1ebf09f6d88f74026632da12f1a67a89eb69d49efd1f1f8d4440dec7f4e8adbcb25a8a147c5c7608ea867bbbcbfd40305dfb3b51a1a623824a403e1bae43368a4b683440bd564fa2f6c5ec395cd422479820dd62941f2e05294d7b12819df3527321aca49ee2ff95f19e39d5ff1b4f7cbae770e6e9fef24a8c346cbbea04ec2c5bbf8e433422d60ab29ba1a630ffe86f50c75861d0de5b10849014e70ddd0cea6aeb73951951e9818e89c059d958c5656f733223124e5101eee58e06da7d44d4ec8be1c0a493205d2a7b53456774f2cee1c5a2ce1dbb46e6047c10f21108c0b725632006debca2a2a24a386d8597706f163df91147909a100ca5c0f00eb05bf9f8d108712ec57b8a06f28a409d33c65936ba23f4d2489946bef270a4d98240ed6b7ed76cf3693dd3c7d8c41935dad62799e5acfc4830c0c381faa81ec6ca3023b7ba50bfea34806d35d6cf94ba5f06b75a574a6926dacb632ec1bc4a8d5efe08048087d39112f11df28491d8ed7f68373e396e41497c1744a4b7ad6732cfbc7b0512a16596dd36633c8997884d38999a33ca3e1ef3577f813e53873fd892c03f11c96db2ff43918e041184c4b06c074a9fa5ccff0a9cd956346aacf03cc3c1400b6b6c75cb27006aa0e9633d3a87a6d839b33957755fad367d9575d6a42ed70422678a786fd5dfd2264ed4c84ff3ce52075654a0288e841cc34dd0204550ac2e4e08c51972bbd2d8b08911e77800f2fbc53d3225e9bb5897b6ce912423bcb44203e2266c9aefdc7ec80c34d76a9daaaa3dad93e6dfdf6c9c8585b687bb76b6a5f2e8729df15ac1788a24ac25ec4e915b260a721a85e1b489a53b9a38542a6a0f9ee61fe297e46ba80e37a89043d69a22fcee9c6da52e3362cff20f8ff787c1016a642a7b6db1084844ec5fcaeca60ba00a7c13d2592e96380a2949d8024a3e79329aa2870121cee040d5cc0048247a6456228cb5c9d03e8552d6f64e4a1616d2883634d5abdef5d544b561ae0358ca0d29b3ac4a1bea5f39c7a1d7d6ad185cd93f2ab2448bc4666ce0f337524428489116b46d9105f84359b159ffe1ca796f864cb87bead3b15ca6fb6195fe87d90dc9e4e4a25375dbd0182d3bc4dbd8b16af0083771582d00db41586db3e58619e9fd2b1eb5a4b6c0fa1da37d57c15819b6fb4b25e9db258c05db994da81be5a8dbb233f95a2bc3e942bddfc25ac927ef857af988afe615e99456be861edf95ae817007ff7d94a830e5d52e390fed8a5ec894a9a87ee85d31cd61c93e2630111bbf6426e35d50f69badbae5566f2ec8eab3702ed7ae2463569f916192ad1aa4af76afd24fec3ccf9807d482c731a380375e0950573ff525d41df0e88cb45613a6c63afea48dd44c579e2b1f57a4f50d17cdbfe9ff34441fb0f9fb8a564e496a48288a25f62cb684b33b141d52aa9b7819729b200a1b746b064f7dd81d76467b324553814a1523f4eb7167025cad1d9dd526208acd8e9ae1245a88fdc62a6f06f2fbc231cbbd4d1811f2c02dffd9aa92f170a22ebf326afee0794061e79b807df3d7be71d48ad71e32f711bd8848108f231e7b53fbb8f821e430e7d97c09a17821c1b4fbbccb889ea69221a77052db7c22863944eace132fa17a244db8f8528d5526e3ec9c80ef8008face7a71395fcf8d9a5ba86c12d83219673d73ce5184cbc3130eec3994e03b33c599b6a71efd698b40826ee2c74956568cc77d403a39100e0449876010b81ab3fa007370896baf180c135cd53ba7b459ab85b9deff30ddafb2a6376ddc1499d1696260188b5f6256f886acb0add2773a03293900ad462d274b05df6bc221b17f16fd2865c064c85306d1518f6253d402fec63641bec5f65442ce7c19f43c2dcf695cb82ab34c136b9f661415657e37009c52061eb85acd6b2096401660fd98ed73ca3a6e00620be0137d8839d8bb34dac35e00302d23dff079fb43aa927a9e9278c168e29c204138931f1e684d9d4da10a8041a333a2fe950a5b860d4a055e47533eca8ba649b681c7a459331f93d30ee7bb68ca281751a8d77007de015fdeac2eb276e8babb74dc78f9b3f8f58ae8b5c45e725d14cfdc372392eae0330ef7eaad1ce6b54b15cc00544a6e9ab6024b44b4d45b711b958bbdf5120d41cac9b2e92f1bec7f7f9c66cc2dcc2cc4cb5f23a440d11c35ee00087f950d5c92dd3919da8804d0cbafa0e3d2414f398acd5e73b674bb8ec43a2962c55340f086d834f4800fee1ea375544ded8c579af230ad393a6c6a242098c5bbc7d2e09128eade3d52cd148a26a527ebe8407b15ad996bde5b6e5fe576f6c873e85fb7e31b465056da520f70fdae40a403a7952e620956b9c884915e2fe3e043fe2807281c86b683fe3ff52150a505ddf5ad51137269d1efec52ffcece121ff8595723b28e745676b37a5842fbd23fd69f9c69956d93703689678e38c8b04b3bf1020bce540070927b14c73afbd68f17e08f381052b48300aea65eeb6d0c544ec8d0f94032caeb8b7c651983c00871993f2c972aa8781c158a060e34ee626578d566b3b0d2e54c82a05428ce1621c1ce29885e4b3f3d55d321f0efed43cd478d96c5f5ee898158fe24775e4524dbd867376d4a3502f547b539141e84829f045313c4c740b04190fd5e11a0a0057efb59cf6a63e0a0bd3d6d837d1ab5594f096647fd8fa125fb088dd40fb5de1627d0ae5839c50efecc0a6d647a0dfae9d3913b6647e20f3e38825e0aa8642932aff0b256e370e2861378a3cf628437a358ecbada58ce3d886d0bc4ce5b4131b84e5522a421fc44878513f845265b58768b2ffc0e734455accd733d441ef7934006db8783955e32193cc07ccac400fae2d2bc75139546717a09e94dba89df0d8bb7f0d248f4861c86f75977990a9d4937fcd80e1c36250a074d4bfdc4a6f51e5103d19bbd2e35dc0082244b068ae1b406a63ce1d388b149f0ef6023d8ac7ff69254f6de2a71fab7cb51244595a1f58a3192743c766f701e1526c746e85a70dc16fcae09ac09f6d51989c721f1944b733bbdea1465b5144af53d309d8c5d0a009e3fe396e1091a88a23359b53de571eae398ce3cc97a470bc1dcf61242f7b624539dba6ce5a118b902a2c633e1ffca8e1e147151b4b24050e5ae3c728ee49a7a487e73f6d729c8be2713f9d6de5a2c396b00324a80bd389690a5c8ed9818f0518a9bee89f043d7d97934d14be86f671a473c31636df10156375a24d323f87f09698a2d5bcc4694d49b8c18c03b31ecbe39db1b6fc5b3ebeeb5983cb674a34323b3c37a0392f9f532b71a9c9377e16d17edfc2585ea2252aa8d707074941db3a440a09bf66d5196081951aea35ef87512d76c3068b2e605bdcac915f0abae4ddc7a0596f1663015cc9c25027ccfc8ba64c57b100d16283e4077f770cd355db84caabb1f5e0cbbde0d8126f431a8ad4329740a86bb7fde8916c5526f96df4ed8ce442d76c72fa15783509f8775e5e8981331877d66f3f02c600dc0ee77680aa09183b55b3f7e806aa28fff28b07f2e695394c86114efc36fd23d07ce06a666c7ebc561fdbb29cd1c9f8d4284a903969734ec9487e560bcd7489a263d8479353fffb8fcc2c519ada15f66133293b82b8f5e04c038c0ba5ef5bf890d058fa7c7b6b70f677b25278f35973ddcede138f5529778a33f0cdcc95925dc886e6e88616e4e8130932a3d6bd4fa0320f33d1a72ea50c0ab20280e087f231ee00bf0436dbaf4dc785909ccb7e5b5ef42cd8e728e6c9844b2f7e38bef0842bbdba67549907fc202641f41cd212bda4091e81e49e57e2c8b48227edcc6cb69affd09754a13d6c354d1ae5b50cbb53babe67afec1cb17ddbae548d965da4fa9db82c32a7d7a27461c0758b2ca9f0f023907a2adfd12ab3ec908f6afc4eedfd8b19430011e27c7ca32564e30aaf5ca304db2692866e6f91971403366ee3e3a328674f5bea6fc6cbc88bb88331557ba7b8b61d611bb58ca1ed4ceda053bb3613db5d8693b49f4a7438e6adf122fcae2d77e78023423870b0fbff6d618456c600320fc17337b780f683c2483dc1e67daca60808c86b5c2ae5a6975b1a3e68dcd4bf2d14b87986549051c5261bc78d087ddeafb5f7385992a08913a75f0b5ec6ed6db060fb684bc9b1b7219d676f6f7fcde095290db216754834fd70ffc857aa8f3704d2d3c15b4efa41b73998d4570eb5d5d399926d3f5eb2ce03dbb22b270a9c429da83125a07bbc882a75bb8c9561ba62cfe2d80ac95ff03b5f50e5200a3721adb31d8ccb4ca0ff537942df6ddd7cac49c7389b22f719ee6dc781b9979ce70aee2d4f3bc275a453a92803be377b9c675c5ffa4e50e53bd71ab4d7e30c9a96cb25f44c6eb6262e2db3c88a227070486a3cf234e53887f5edbbc566620b9edee6078626ae048ce9c2a2efa2b13cf590c87530cd8c3f2ebaf0e0163516eb218c60b459037c5b9b51060edac5ecdeae72117e1281d76e257d43a5afe429620aaa100eb88a1d64976bcf4fb7b9240035524a8b1394f870707a698c1a50d2e0899561c892d9d5aa8900ff660fe1a1733831bc5b3fee24fd9a75a84e5ceeb52bda63da81cca377386a1cd4f9bc7b5e9152ca43e05ffbaab6bc31b6615f0a923272096a92b40b69d3eaf2aed83cb3a04c72fc67673cc56d39d6808274523da5b86667a40056574f15ec5c563af07bdb43d102eb92d6dd81dc3dff15c691b451af8057d60110ddcf2dc731da9111e4d0c44df2efc6cbd80d747aa908e5bfe3169ca02f0c6cf0e04c2c4297ed12e634787d9e50e609d146e864a52e661b4411bd5a0c02ff1ed39e8a3afcd28d07bce396260f381d4fc744b33bb6de633319a32f603e41f723094d56e07e1494e83201a350f2994d995269b2eef1f2247ab9e458a41a23ca4f83845c89903e1d27b0fefb7bd16b36d469b59358164c5bbd7114f4362d5b2850374c26b36a1062</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">神秘的代码哦，需要密码才能进入!</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Java神秘的程序</summary>
    
    
    
    <category term="课程" scheme="https://lxttz.github.io/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    <category term="个人" scheme="https://lxttz.github.io/categories/%E8%AF%BE%E7%A8%8B/%E4%B8%AA%E4%BA%BA/"/>
    
    
    <category term="专科专业课程" scheme="https://lxttz.github.io/tags/%E4%B8%93%E7%A7%91%E4%B8%93%E4%B8%9A%E8%AF%BE%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>数据结构第五章数组和广义表</title>
    <link href="https://lxttz.github.io/posts/a5ff5616.html"/>
    <id>https://lxttz.github.io/posts/a5ff5616.html</id>
    <published>2025-02-28T06:06:11.000Z</published>
    <updated>2025-02-28T06:18:08.905Z</updated>
    
    <content type="html"><![CDATA[<h3 id="🤖-Assistant">🤖 Assistant</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 🧮 第五章：数组与广义表 · 从青铜到王者养成指南</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 🌟 一、数组：整齐划一的「数据方阵」</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 1.1 🧱 数组基础认知</span></span><br><span class="line">![<span class="string">数组结构示意图</span>](<span class="link">https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4b28d7c3f7ac4f4a857b1c5c15dcb0a7~tplv-k3u1fbpfcp-zoom-1.image</span>)</span><br><span class="line"><span class="code">```c</span></span><br><span class="line"><span class="code">int classroom[5] = &#123;85,92,78,90,88&#125;; // 典型的「数组宿舍楼」</span></span><br></pre></td></tr></table></figure><h4 id="📌-核心特点">📌 核心特点</h4><table><thead><tr><th>特点</th><th>解读</th></tr></thead><tbody><tr><td>🔒 <strong>同质化</strong></td><td>所有「房间」住同类型数据</td></tr><tr><td>🚌 <strong>连续存储</strong></td><td>内存地址连续（门牌号相邻）</td></tr><tr><td>🎯 <strong>随机访问</strong></td><td>通过下标可直接定位到具体元素</td></tr></tbody></table><h3 id="1-2-🏗️-高维数组建模秘籍">1.2 🏗️ 高维数组建模秘籍</h3><h4 id="🔢-二维数组地址计算（行优先）">🔢 二维数组地址计算（行优先）</h4><p>★ <strong>公式密码</strong>：<code>Loc(A[i][j]) = Loc(A[0][0]) + (i*n + j)*size</code><br>假设5x4矩阵中每个元素占4字节：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算A[2][3]地址（起始地址200）</span></span><br><span class="line">地址 = <span class="number">200</span> + (<span class="number">2</span>*<span class="number">4</span> + <span class="number">3</span>)*<span class="number">4</span> = <span class="number">200</span> + <span class="number">11</span>*<span class="number">4</span> = <span class="number">244</span> ✔️</span><br></pre></td></tr></table></figure><h4 id="🗺️-存储策略对比">🗺️ 存储策略对比</h4><table><thead><tr><th>策略</th><th>存储方式</th><th>适用场景</th></tr></thead><tbody><tr><td>行优先存储</td><td>按行展开(类似读书顺序)</td><td>C/C++、Python</td></tr><tr><td>列优先存储</td><td>先排完一列再下一列</td><td>Fortran语言</td></tr></tbody></table><h3 id="1-3-🦸♂️-特殊矩阵的「瘦身术」">1.3 🦸♂️ 特殊矩阵的「瘦身术」</h3><h4 id="🔀-对称矩阵压缩">🔀 对称矩阵压缩</h4><p>只需存储对角线及一侧元素：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">原矩阵：      存储数组：</span><br><span class="line">1<span class="number"> 2 </span>3      <span class="number"> 1 </span></span><br><span class="line">2<span class="number"> 4 </span>5 ➔    <span class="number"> 2 </span>4 </span><br><span class="line">3<span class="number"> 5 </span>6      <span class="number"> 3 </span>5 6</span><br></pre></td></tr></table></figure><h4 id="🌲-稀疏矩阵的三元组表示">🌲 稀疏矩阵的三元组表示</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Triple</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> row;</span><br><span class="line">    <span class="type">int</span> col;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 存储非零元素坐标和值</span></span><br></pre></td></tr></table></figure><h2 id="🌌-二、广义表：会「变身术」的数据魔法师">🌌 二、广义表：会「变身术」的数据魔法师</h2><h3 id="2-1-✨-魔法特性">2.1 ✨ 魔法特性</h3><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(莫比乌斯环, (递归, (套娃)), <span class="number">42</span>) <span class="comment">; Lisp风格的广义表</span></span><br></pre></td></tr></table></figure><ul><li>🌀 <strong>魔法元素</strong>：可以是原子（基本数据项）或子表</li><li>🎭 <strong>形态自由</strong>：支持空表、嵌套、递归结构</li><li>🕳️ <strong>深度定义</strong>：嵌套层数（原子深度为0，空表情深度为1）</li></ul><h3 id="2-2-🌀-结构解密">2.2 🌀 结构解密</h3><h4 id="头尾表示法-vs-层次表示法">头尾表示法 vs 层次表示法</h4><p><img src="https://img-blog.csdnimg.cn/20201119194708325.png" alt="广义表示例图"></p><h4 id="终极挑战：计算深度">终极挑战：计算深度</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算广义表 L=(a,(b,(c,d)),e) 的深度</span></span><br><span class="line"><span class="number">1.</span> a → 深度<span class="number">0</span>（原子）</span><br><span class="line"><span class="number">2.</span> (b,(c,d)) → 分解后得到(c,d)，深入一层 → 总深度 <span class="number">2</span>+<span class="number">1</span>=<span class="number">3</span> ✔️</span><br></pre></td></tr></table></figure><h3 id="2-3-🔧-核心操作工具箱">2.3 🔧 核心操作工具箱</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码示例：取表头和表尾</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GList</span> &#123;</span><br><span class="line">    Object head;   <span class="comment">// 可能是原子或子表</span></span><br><span class="line">    GList tail;    <span class="comment">// 剩余部分构成的新广义表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="📊-三、考古现场：数组-vs-广义表">📊 三、考古现场：数组 vs 广义表</h2><table><thead><tr><th>对比维度</th><th>数组</th><th>广义表</th><th>战场解析</th></tr></thead><tbody><tr><td>🔢 <strong>元素类型</strong></td><td>严格统一</td><td>混合类型自由搭配</td><td>广义表更灵活</td></tr><tr><td>🧠 <strong>存储结构</strong></td><td>线性的物理连续</td><td>递归的逻辑链接</td><td>数组访问更快</td></tr><tr><td>🚀 <strong>操作效率</strong></td><td>删改耗时O(n)</td><td>动态操作更高效</td><td>各有适用场景</td></tr><tr><td>🎮 <strong>典型应用</strong></td><td>图像处理、矩阵运算</td><td>人工智能、语法分析</td><td>领域分工明确</td></tr></tbody></table><h2 id="🧩-四、思维导图脑暴中心">🧩 四、思维导图脑暴中心</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mindmap</span><br><span class="line">  root((高阶数据结构))</span><br><span class="line">    数组--&gt; 特点[&quot;🔑 同质 | 连续 | 随机访问&quot;]</span><br><span class="line">    数组--&gt; 分类[&quot;📦 一维 → 多维 → 特殊矩阵&quot;]</span><br><span class="line">    数组--&gt; 操作[&quot;⚡ 查改O(1) | 插删O(n)&quot;]</span><br><span class="line">    广义表--&gt; 特性[&quot;🌀 递归 | 嵌套 | 灵活结构&quot;]</span><br><span class="line">    广义表--&gt; 表示法[&quot;🔖 头尾 ↔ 层级&quot;]</span><br><span class="line">    广义表--&gt; 魔法操作[&quot;🎩 取头/尾 | 求深度&quot;]</span><br><span class="line">    应用场景--&gt; 数组应用[&quot;📷 图像存储 | 矩阵运算&quot;]</span><br><span class="line">    应用场景--&gt; 广义表应用[&quot;🤖 AI决策树 | 编译器解析&quot;]</span><br></pre></td></tr></table></figure><h2 id="💡-学习效果自测（含答案）">💡 学习效果自测（含答案）</h2><ol><li><p><strong>二维数组A[8][10]采用行优先存储，首地址200，每个元素占4字节，求A[3][5]地址？</strong><br>➔ 展开计算：200 + (3*10 +5)<em>4 = 200 + 35</em>4 = 340 ✅</p></li><li><p><strong>广义表L=((a,b), (c,(d,e)))的深度是多少？</strong><br>➔ 最深层是(d,e)所在位置：深度为3 ✅</p></li><li><p><strong>对对称矩阵进行压缩存储的目的是什么？</strong><br>➔ 节省存储空间 + 提升访问效率 ✅</p></li></ol><p>🌟 提示：尝试用不同编程语言实现广义表的基础操作，能加深理解哦！</p><pre><code>---✨ **学习锦囊**：建议配合可视化工具（如Data Structure Visualizations网站）观察数组和广义表的动态操作过程，理论结合实践效果更佳！</code></pre>]]></content>
    
    
    <summary type="html">数据结构第五章数组和广义表</summary>
    
    
    
    <category term="数据结构" scheme="https://lxttz.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数组" scheme="https://lxttz.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
    <category term="广义表" scheme="https://lxttz.github.io/tags/%E5%B9%BF%E4%B9%89%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>数据结构第四章串</title>
    <link href="https://lxttz.github.io/posts/3b81ea37.html"/>
    <id>https://lxttz.github.io/posts/3b81ea37.html</id>
    <published>2025-02-28T03:08:58.000Z</published>
    <updated>2025-02-28T03:18:46.791Z</updated>
    
    <content type="html"><![CDATA[<h3 id="🤖-Assistant">🤖 Assistant</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 📜 第四章 串（String）</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 🌟 基本概念</span></span><br><span class="line"><span class="section">### 🎯 串是什么？</span></span><br><span class="line">🔹 <span class="strong">**定义**</span>：串是由零个或多个字符组成的<span class="strong">**有限序列**</span>（线性表的特例，元素类型固定为字符）  </span><br><span class="line">🔹 <span class="strong">**关键术语**</span>：  </span><br><span class="line"><span class="bullet">  -</span> <span class="strong">**子串**</span>：串中任意连续字符组成的子序列  </span><br><span class="line"><span class="bullet">  -</span> <span class="strong">**主串**</span>：包含子串的原始串  </span><br><span class="line"><span class="bullet">  -</span> <span class="strong">**字符位置**</span>：字符在序列中的序号（从1开始）  </span><br><span class="line"><span class="bullet">  -</span> <span class="strong">**串相等**</span>：长度相同且对应位置字符完全相同  </span><br><span class="line"></span><br><span class="line">🔸 <span class="strong">**示例对比**</span>：  </span><br><span class="line"><span class="code">```text</span></span><br><span class="line"><span class="code">主串 S = &quot;HelloWorld&quot;</span></span><br><span class="line"><span class="code">子串 T = &quot;lloWo&quot;</span></span><br><span class="line"><span class="code">空串 = &quot;&quot;</span></span><br><span class="line"><span class="code">空格串 = &quot;   &quot;（包含3个空格）</span></span><br></pre></td></tr></table></figure><hr><h2 id="🏗️-串的存储结构">🏗️ 串的存储结构</h2><h3 id="📌-顺序存储结构（定长）">📌 顺序存储结构（定长）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAXLEN 255</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> ch[MAXLEN];  <span class="comment">// 存储字符的数组</span></span><br><span class="line">    <span class="type">int</span> length;       <span class="comment">// 当前串长度</span></span><br><span class="line">&#125; HString;</span><br></pre></td></tr></table></figure><p>🔸 <strong>特点</strong>：</p><ul><li>预分配固定长度空间</li><li>可能截断超长字符串（需处理溢出问题）</li></ul><h3 id="📌-堆分配存储（动态扩展）">📌 堆分配存储（动态扩展）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> *ch;   <span class="comment">// 动态分配首地址</span></span><br><span class="line">    <span class="type">int</span> length; <span class="comment">// 实际长度</span></span><br><span class="line">&#125; DString;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化示例</span></span><br><span class="line">DString S;</span><br><span class="line">S.ch = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span> * <span class="keyword">sizeof</span>(<span class="type">char</span>)); </span><br><span class="line">S.length = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>🔹 <strong>优势</strong>：可动态调整内存大小（realloc实现扩容）</p><h3 id="📌-链式存储（块链结构）">📌 链式存储（块链结构）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> CHUNKSIZE 4  <span class="comment">// 每个节点存4字符</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Chunk</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> ch[CHUNKSIZE];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Chunk</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; Chunk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    Chunk *head, *tail;  <span class="comment">// 头尾指针</span></span><br><span class="line">    <span class="type">int</span> curlen;          <span class="comment">// 当前总长度</span></span><br><span class="line">&#125; LString;</span><br></pre></td></tr></table></figure><p>🔸 <strong>特点</strong>：</p><ul><li>存储密度 = 实际字符数 / 总分配空间</li><li>适合超大文本存储（如小说内容）</li></ul><hr><h2 id="🔍-串的基本操作">🔍 串的基本操作</h2><h3 id="1-求串长（StrLength）">1. 求串长（StrLength）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">StrLength</span><span class="params">(DString S)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> S.length;  <span class="comment">// O(1)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-串比较（StrCompare）">2. 串比较（StrCompare）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">StrCompare</span><span class="params">(DString S, DString T)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;S.length &amp;&amp; i&lt;T.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(S.ch[i] != T.ch[i]) </span><br><span class="line">            <span class="keyword">return</span> S.ch[i]-T.ch[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> S.length - T.length; <span class="comment">// 前缀相同则比较长度</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-串连接（Concat）">3. 串连接（Concat）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DString <span class="title function_">Concat</span><span class="params">(DString S, DString T)</span> &#123;</span><br><span class="line">    DString newStr;</span><br><span class="line">    newStr.ch = (<span class="type">char</span>*)<span class="built_in">malloc</span>((S.length + T.length) * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="comment">// 复制S的内容</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;S.length; i++) newStr.ch[i] = S.ch[i];</span><br><span class="line">    <span class="comment">// 追加T的内容</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;T.length; i++) newStr.ch[S.length+i] = T.ch[i];</span><br><span class="line">    newStr.length = S.length + T.length;</span><br><span class="line">    <span class="keyword">return</span> newStr;  <span class="comment">// 时间复杂度 O(n+m)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="⚔️-模式匹配算法">⚔️ 模式匹配算法</h2><h3 id="🛠️-BF算法（暴力匹配）">🛠️ BF算法（暴力匹配）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Index_BF</span><span class="params">(DString S, DString T)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; S.length &amp;&amp; j &lt; T.length) &#123;</span><br><span class="line">        <span class="keyword">if</span>(S.ch[i] == T.ch[j]) &#123; i++; j++; &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123; i = i - j + <span class="number">1</span>; j = <span class="number">0</span>; &#125;  <span class="comment">// i回溯</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (j &gt;= T.length) ? (i - T.length) : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🔸 <strong>时间复杂度</strong>：O(n×m)（最坏情况）<br>🔹 <strong>示例流程</strong>：<br>主串 <code>ABABCABCAC</code>，模式串 <code>ABCAC</code><br><img src="https://cdn.jsdelivr.net/gh/kevinwho/pic@main/20230803145627.png" alt="BF算法示例"></p><hr><h3 id="🎯-KMP算法（改进版）">🎯 KMP算法（改进版）</h3><h4 id="核心思想：利用已匹配信息避免回溯">核心思想：利用已匹配信息避免回溯</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关键：构建next数组</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">get_next</span><span class="params">(DString T, <span class="type">int</span> next[])</span> &#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>, j=<span class="number">-1</span>;</span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; T.length<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">-1</span> || T.ch[i]==T.ch[j]) &#123;</span><br><span class="line">            i++; j++;</span><br><span class="line">            next[i] = j;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            j = next[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// KMP主算法</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Index_KMP</span><span class="params">(DString S, DString T)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> next[T.length];</span><br><span class="line">    get_next(T, next);</span><br><span class="line">    <span class="keyword">while</span>(i &lt; S.length &amp;&amp; j &lt; T.length) &#123;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">-1</span> || S.ch[i]==T.ch[j]) &#123;i++; j++;&#125;</span><br><span class="line">        <span class="keyword">else</span> j = next[j];  <span class="comment">// j回退，i不回溯</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (j &gt;= T.length) ? (i - T.length) : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🔹 <strong>性能飞跃</strong>：时间复杂度 → <strong>O(n+m)</strong><br>🔸 <strong>next数组计算示例</strong>：模式串 <code>ABCDABD</code></p><table><thead><tr><th>索引</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th></tr></thead><tbody><tr><td>字符</td><td>A</td><td>B</td><td>C</td><td>D</td><td>A</td><td>B</td><td>D</td></tr><tr><td>next</td><td>-1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>2</td></tr></tbody></table><hr><h2 id="📊-模式匹配算法对比">📊 模式匹配算法对比</h2><table><thead><tr><th>算法</th><th>时间复杂度</th><th>空间复杂度</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>BF算法</td><td>O(n×m)</td><td>O(1)</td><td>实现简单</td><td>效率低，回溯多</td></tr><tr><td>KMP算法</td><td>O(n+m)</td><td>O(m)</td><td>无回溯，效率高</td><td>需要预处理next数组</td></tr></tbody></table><hr><h2 id="🚀-实际应用场景">🚀 实际应用场景</h2><ol><li><strong>文本编辑器</strong>：快速查找/替换关键词</li><li><strong>搜索引擎</strong>：网页内容的关键词匹配</li><li><strong>生物信息</strong>：DNA序列模式匹配</li><li><strong>代码解析</strong>：XML/JSON等格式校验</li><li><strong>数据压缩</strong>：LZ77等压缩算法基于字符串匹配</li></ol><hr><h2 id="🧠-思维导图总结">🧠 思维导图总结</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[串] --&gt; B[基本概念]</span><br><span class="line">    A --&gt; C[存储结构]</span><br><span class="line">    A --&gt; D[基本操作]</span><br><span class="line">    A --&gt; E[模式匹配]</span><br><span class="line">    </span><br><span class="line">    B --&gt; F[空串/空格串]</span><br><span class="line">    B --&gt; G[子串/主串]</span><br><span class="line">    </span><br><span class="line">    C --&gt; H[顺序存储]</span><br><span class="line">    C --&gt; I[堆分配]</span><br><span class="line">    C --&gt; J[链式存储]</span><br><span class="line">    </span><br><span class="line">    D --&gt; K[连接]</span><br><span class="line">    D --&gt; L[比较]</span><br><span class="line">    D --&gt; M[求子串]</span><br><span class="line">    </span><br><span class="line">    E --&gt; N[BF算法]</span><br><span class="line">    E --&gt; O[KMP算法]</span><br><span class="line">    O --&gt; P[next数组]</span><br></pre></td></tr></table></figure><hr><h2 id="📜-扩展知识">📜 扩展知识</h2><h3 id="1-KMP优化：nextval数组">1. KMP优化：nextval数组</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">get_nextval</span><span class="params">(DString T, <span class="type">int</span> nextval[])</span> &#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>, j=<span class="number">-1</span>;</span><br><span class="line">    nextval[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; T.length<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">-1</span> || T.ch[i] == T.ch[j]) &#123;</span><br><span class="line">            i++; j++;</span><br><span class="line">            <span class="comment">// 新增优化判断</span></span><br><span class="line">            <span class="keyword">if</span>(T.ch[i] != T.ch[j]) nextval[i] = j;</span><br><span class="line">            <span class="keyword">else</span> nextval[i] = nextval[j];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            j = nextval[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Sunday算法">2. Sunday算法</h3><p>🔹 <strong>特点</strong>：每次失败时根据主串中下一个字符决定跳跃步数<br>🔸 <strong>优势</strong>：实际应用中比KMP更快（如grep工具）</p><hr><h2 id="⚠️-易错点提醒">⚠️ 易错点提醒</h2><ol><li><strong>数组下标处理</strong>：C语言中字符串数组从0开始，教材伪代码常从1开始</li><li><strong>KMP的next数组</strong>：不同教材定义可能不同（本例采用主流-1初始值方式）</li><li><strong>模式串为空串</strong>：需特殊处理避免运算错误</li></ol><pre><code></code></pre>]]></content>
    
    
    <summary type="html">数据结构第四章串</summary>
    
    
    
    <category term="数据结构" scheme="https://lxttz.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="串" scheme="https://lxttz.github.io/tags/%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>数据结构第三章栈与队列</title>
    <link href="https://lxttz.github.io/posts/3740a66a.html"/>
    <id>https://lxttz.github.io/posts/3740a66a.html</id>
    <published>2025-02-28T03:05:24.000Z</published>
    <updated>2025-02-28T03:06:25.084Z</updated>
    
    <content type="html"><![CDATA[<h3 id="🤖-Assistant">🤖 Assistant</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 🧱 第三章 栈与队列</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 🌟 基本概念</span></span><br><span class="line"><span class="section">### 🎯 什么是数据结构中的&quot;栈&quot;？</span></span><br><span class="line"><span class="code">```c</span></span><br><span class="line"><span class="code">// 栈的操作特点：LIFO（Last In First Out）</span></span><br><span class="line"><span class="code">#define MaxSize 50  </span></span><br><span class="line"><span class="code">typedef struct &#123;</span></span><br><span class="line"><span class="code">    ElemType data[MaxSize];  </span></span><br><span class="line"><span class="code">    int top;  // 栈顶指针</span></span><br><span class="line"><span class="code">&#125; SqStack;</span></span><br></pre></td></tr></table></figure><p>🔹 <strong>核心规则</strong>：</p><ul><li>插入/删除只能在一端进行（栈顶）</li><li>后进入的元素先被访问（就像叠盘子）<br>🔸 <strong>关键操作</strong>：</li><li>Push（入栈） → <code>data[++top] = x</code></li><li>Pop（出栈） → <code>x = data[top--]</code><br>⚠️ 注意：空栈时top=-1（图示↓）<br><img src="https://cdn.jsdelivr.net/gh/kevinwho/pic@main/20230725110935.png" alt="栈结构示意图"></li></ul><hr><h3 id="🎯-队列是什么？">🎯 队列是什么？</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 队列的操作特点：FIFO（First In First Out）</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    ElemType data[MaxSize];  </span><br><span class="line">    <span class="type">int</span> front, rear;  <span class="comment">// 队头队尾指针</span></span><br><span class="line">&#125; SqQueue;</span><br></pre></td></tr></table></figure><p>🔹 <strong>基本规则</strong>：</p><ul><li>插入在队尾（rear），删除在队头（front）</li><li>先进入的元素先离开（类似排队）<br>🔸 <strong>关键操作</strong>：</li><li>入队 → <code>data[rear++] = x</code></li><li>出队 → <code>x = data[front++]</code><br>⚠️ 假溢出图示↓<br><img src="https://cdn.jsdelivr.net/gh/kevinwho/pic@main/20230725111244.png" alt="队列假溢出"></li></ul><hr><h2 id="🧱-栈的深度解析">🧱 栈的深度解析</h2><h3 id="🔧-两种实现方式对比">🔧 两种实现方式对比</h3><table><thead><tr><th>类型</th><th>存储方式</th><th>操作复杂度</th><th>典型应用场景</th></tr></thead><tbody><tr><td>顺序栈</td><td>静态数组+栈顶指针</td><td>O(1)</td><td>函数调用栈、表达式求值</td></tr><tr><td>链栈</td><td>链表+头插法</td><td>O(1)</td><td>递归转非递归</td></tr></tbody></table><h4 id="📌-栈的溢出问题">📌 栈的溢出问题</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flowchart TD</span><br><span class="line">    A[栈空] --&gt;|top=-1时pop| Underflow</span><br><span class="line">    B[栈满] --&gt;|top=MaxSize-1时push| Overflow</span><br></pre></td></tr></table></figure><hr><h2 id="🚦-队列的全面剖析">🚦 队列的全面剖析</h2><h3 id="🔧-三种实现方案">🔧 三种实现方案</h3><h4 id="1-顺序队列（基础版）">1. 顺序队列（基础版）</h4><p>🔸 <strong>缺陷</strong>：产生假溢出 → 已出队的空间无法复用</p><h4 id="2-循环队列（经典解决方案）">2. 循环队列（经典解决方案）</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关键算法：</span></span><br><span class="line"><span class="comment">// 入队操作</span></span><br><span class="line">rear = (rear + <span class="number">1</span>) % MaxSize;</span><br><span class="line"><span class="comment">// 出队操作</span></span><br><span class="line">front = (front + <span class="number">1</span>) % MaxSize;</span><br></pre></td></tr></table></figure><p>🔹 <strong>判空条件</strong>：<code>front == rear</code><br>🔹 <strong>判满策略</strong>：</p><ul><li>方案一：留空一个元素 → <code>(rear+1)%MaxSize == front</code></li><li>方案二：新增size变量 → <code>size == MaxSize</code></li></ul><h4 id="3-链式队列（动态增长）">3. 链式队列（动态增长）</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span> &#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; LinkNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    LinkNode *front, *rear;</span><br><span class="line">&#125; LinkQueue;</span><br></pre></td></tr></table></figure><p>🔸 优点：永不溢出（除非内存不足）</p><hr><h2 id="🎭-特殊队列">🎭 特殊队列</h2><h3 id="🔄-双端队列（Deque）">🔄 双端队列（Deque）</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 支持两端操作的队列</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">addFirst</span><span class="params">(ElemType x)</span>;  <span class="comment">// 队头插入</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">addLast</span><span class="params">(ElemType x)</span>;   <span class="comment">// 队尾插入</span></span><br><span class="line">ElemType <span class="title function_">removeFirst</span><span class="params">()</span>;     <span class="comment">// 队头删除</span></span><br><span class="line">ElemType <span class="title function_">removeLast</span><span class="params">()</span>;      <span class="comment">// 队尾删除</span></span><br></pre></td></tr></table></figure><p>🔸 <strong>应用场景</strong>：滑动窗口算法、撤销/重做功能</p><h3 id="🔝-优先级队列">🔝 优先级队列</h3><p>🔹 <strong>本质</strong>：出队顺序由元素优先级决定（常用于操作系统任务调度）</p><hr><h2 id="📊-栈与队列的终极对决">📊 栈与队列的终极对决</h2><table><thead><tr><th>特性</th><th>栈</th><th>队列</th></tr></thead><tbody><tr><td>数据进出规则</td><td>LIFO（后进先出）</td><td>FIFO（先进先出）</td></tr><tr><td>典型结构</td><td>单开口容器</td><td>双开口管道</td></tr><tr><td>核心指针</td><td>top指针</td><td>front/rear指针</td></tr><tr><td>经典应用</td><td>括号匹配/递归调用</td><td>消息队列/BFS遍历</td></tr></tbody></table><hr><h2 id="🛠️-实战应用场景">🛠️ 实战应用场景</h2><ol><li><strong>栈的典型应用</strong>：<ul><li>函数调用栈（执行上下文管理）</li><li>编辑器撤销功能（Ctrl+Z）</li><li>括号有效性检测（{[()]}判断）</li></ul></li><li><strong>队列的经典场景</strong>：<ul><li>打印机任务队列（先到先打印）</li><li>线程池任务调度（保持处理顺序）</li><li>广度优先搜索（BFS逐层遍历）</li></ul></li><li><strong>混合应用</strong>：<ul><li>用两个栈实现队列</li><li>用队列实现栈</li></ul></li></ol><hr><h2 id="🧠-思维导图">🧠 思维导图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[栈与队列] --&gt; B[栈]</span><br><span class="line">    A --&gt; C[队列]</span><br><span class="line">    </span><br><span class="line">    B --&gt; D[顺序栈]</span><br><span class="line">    B --&gt; E[链栈]</span><br><span class="line">    B --&gt; F[共享栈]</span><br><span class="line">    </span><br><span class="line">    C --&gt; G[顺序队列]</span><br><span class="line">    C --&gt; H[循环队列]</span><br><span class="line">    C --&gt; I[链式队列]</span><br><span class="line">    C --&gt; J[优先级队列]</span><br><span class="line">    </span><br><span class="line">    J --&gt; K[最大优先队列]</span><br><span class="line">    J --&gt; L[最小优先队列]</span><br></pre></td></tr></table></figure><hr><h2 id="📌-重要公式速查表">📌 重要公式速查表</h2><table><thead><tr><th>描述</th><th>计算公式</th></tr></thead><tbody><tr><td>顺序栈元素个数</td><td>top + 1</td></tr><tr><td>循环队列元素个数</td><td>(rear - front + MaxSize) % MaxSize</td></tr><tr><td>循环队列判满（方案一）</td><td>(rear + 1) % MaxSize == front</td></tr></tbody></table><pre><code></code></pre>]]></content>
    
    
    <summary type="html">数据结构第三章栈与队列</summary>
    
    
    
    <category term="数据结构" scheme="https://lxttz.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="栈与队列" scheme="https://lxttz.github.io/tags/%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>数据结构第二章线性表</title>
    <link href="https://lxttz.github.io/posts/e43e6480.html"/>
    <id>https://lxttz.github.io/posts/e43e6480.html</id>
    <published>2025-02-28T02:11:01.000Z</published>
    <updated>2025-02-28T02:55:07.296Z</updated>
    
    <content type="html"><![CDATA[<h3 id="🤖-Assistant">🤖 Assistant</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 📦 第二章 线性表</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 📚 基本概念</span></span><br><span class="line"><span class="section">### 📌 什么是线性表？</span></span><br><span class="line">🔹 <span class="strong">**定义**</span>：线性表是由 <span class="strong">**n个数据元素**</span>（结点）组成的 <span class="strong">**有限序列**</span>，元素类型相同，且具有 <span class="strong">**逻辑上的顺序关系**</span>  </span><br><span class="line">🔹 <span class="strong">**特点**</span>：  </span><br><span class="line"><span class="bullet">  -</span> 唯一的<span class="code">`第一个元素`</span>（无直接前驱）和<span class="code">`最后一个元素`</span>（无直接后继）  </span><br><span class="line"><span class="bullet">  -</span> 其他元素有且仅有一个<span class="strong">**直接前驱**</span>和一个<span class="strong">**直接后继**</span>  </span><br><span class="line">🔹 <span class="strong">**示例**</span>：  </span><br><span class="line">  ![](<span class="link">https://cdn.jsdelivr.net/gh/kevinwho/pic@main/20230610160510.png</span>)</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="section">## 📚 顺序存储结构（顺序表）</span></span><br><span class="line"><span class="section">### 📌 定义与特点</span></span><br><span class="line"><span class="code">```c</span></span><br><span class="line"><span class="code">#define MAXSIZE 100  </span></span><br><span class="line"><span class="code">typedef struct &#123;  </span></span><br><span class="line"><span class="code">    ElemType data[MAXSIZE];  </span></span><br><span class="line"><span class="code">    int length;  </span></span><br><span class="line"><span class="code">&#125; SqList;  </span></span><br></pre></td></tr></table></figure><p>🔸 <strong>核心原理</strong>：用<strong>连续存储单元</strong>存放线性表元素<br>🔸 <strong>特性</strong>：</p><ul><li>支持随机访问（时间复杂度 O(1)）</li><li>插入/删除平均移动 n/2 个元素（时间复杂度 O(n)）</li></ul><h3 id="📌-静态分配-vs-动态分配">📌 静态分配 vs 动态分配</h3><table><thead><tr><th>类型</th><th>特点</th><th>适用场景</th></tr></thead><tbody><tr><td>静态分配</td><td>数组大小固定</td><td>数据量已知且稳定</td></tr><tr><td>动态分配</td><td>可扩容（realloc）</td><td>数据量变化较大</td></tr></tbody></table><hr><h2 id="📚-链式存储结构（链表）">📚 链式存储结构（链表）</h2><h3 id="📌-单链表结构">📌 单链表结构</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> &#123;</span>  </span><br><span class="line">    ElemType data;  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>* <span class="title">next</span>;</span>  </span><br><span class="line">&#125; LNode, *LinkList;  </span><br></pre></td></tr></table></figure><p>🔹 <strong>核心要点</strong>：</p><ul><li>节点 = 数据域 + 指针域</li><li><strong>头指针</strong> vs <strong>头结点</strong>：<ul><li>头结点：为统一操作而添加的虚拟节点（<code>data域无意义</code>）</li><li>带头结点的链表操作更统一</li></ul></li></ul><h3 id="📌-循环链表">📌 循环链表</h3><p><img src="https://cdn.jsdelivr.net/gh/kevinwho/pic@main/20230610162304.png" alt="循环链表示意图"><br>🔹 尾结点指针指向<strong>头结点</strong><br>🔹 判空条件：<code>尾结点-&gt;next == head</code></p><h3 id="📌-双向链表">📌 双向链表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DuLNode</span> &#123;</span>  </span><br><span class="line">    ElemType data;  </span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DuLNode</span> *<span class="title">prior</span>, *<span class="title">next</span>;</span>  </span><br><span class="line">&#125; DuLNode, *DuLinkList;  </span><br></pre></td></tr></table></figure><p>🔹 特性：支持双向遍历<br>🔹 插入/删除需同时修改前后指针</p><hr><h2 id="📊-顺序表-vs-链表对比">📊 顺序表 vs 链表对比</h2><table><thead><tr><th>操作\结构</th><th>顺序表</th><th>链表</th></tr></thead><tbody><tr><td>存取元素</td><td>O(1)</td><td>O(n)</td></tr><tr><td>插入/删除</td><td>O(n)（需移动元素）</td><td>O(1)（仅修改指针）</td></tr><tr><td>空间分配</td><td>预先静态分配</td><td>动态实时分配</td></tr><tr><td>适用场景</td><td>查询多，增删少</td><td>频繁增删</td></tr></tbody></table><hr><h2 id="🛠️-应用场景">🛠️ 应用场景</h2><ol><li><strong>顺序表</strong>：高频随机访问（如数据库索引）</li><li><strong>单链表</strong>：浏览器历史记录（支持后退）</li><li><strong>双向链表</strong>：LRU缓存淘汰算法</li><li><strong>循环链表</strong>：约瑟夫问题（Josephus problem）</li></ol><hr><h2 id="🎨-思维导图总结">🎨 思维导图总结</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[线性表] --&gt; B[顺序表]</span><br><span class="line">    A --&gt; C[链表]</span><br><span class="line">    B --&gt; D[静态分配]</span><br><span class="line">    B --&gt; E[动态分配]</span><br><span class="line">    C --&gt; F[单链表]</span><br><span class="line">    C --&gt; G[循环链表]</span><br><span class="line">    C --&gt; H[双向链表]</span><br><span class="line">    F --&gt; I[带头结点]</span><br><span class="line">    F --&gt; J[不带头结点]</span><br></pre></td></tr></table></figure><pre><code></code></pre>]]></content>
    
    
    <summary type="html">数据结构第二章线性表</summary>
    
    
    
    <category term="数据结构" scheme="https://lxttz.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构线性表" scheme="https://lxttz.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>数据结构第一章绪论</title>
    <link href="https://lxttz.github.io/posts/538660a9.html"/>
    <id>https://lxttz.github.io/posts/538660a9.html</id>
    <published>2025-02-28T02:09:45.000Z</published>
    <updated>2025-02-28T02:54:59.209Z</updated>
    
    <content type="html"><![CDATA[<h3 id="🤖-Assistant">🤖 Assistant</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 📚 数据结构 | 第1章 绪论精讲</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 🎯 本章知识导航</span></span><br><span class="line"><span class="code">```mermaid</span></span><br><span class="line"><span class="code">graph TD</span></span><br><span class="line"><span class="code">    A[绪论核心知识点] --&gt; B[数据结构是什么？]</span></span><br><span class="line"><span class="code">    A --&gt; C[数据结构分类]</span></span><br><span class="line"><span class="code">    A --&gt; D[算法与复杂度]</span></span><br><span class="line"><span class="code">    B --&gt; B1[数据元素集合]</span></span><br><span class="line"><span class="code">    B --&gt; B2[数据的组织与操作]</span></span><br><span class="line"><span class="code">    C --&gt; C1[逻辑结构]</span></span><br><span class="line"><span class="code">    C --&gt; C2[存储结构]</span></span><br><span class="line"><span class="code">    C1 --&gt; C11[线性]</span></span><br><span class="line"><span class="code">    C1 --&gt; C12[树形]</span></span><br><span class="line"><span class="code">    C1 --&gt; C13[网状]</span></span><br><span class="line"><span class="code">    C1 --&gt; C14[集合]</span></span><br><span class="line"><span class="code">    D --&gt; D1[算法五要素]</span></span><br><span class="line"><span class="code">    D --&gt; D2[时间复杂度/空间复杂度]</span></span><br></pre></td></tr></table></figure><hr><h2 id="📦-1-1-初识数据结构">📦 1.1 初识数据结构</h2><p>数据结构是研究非数值的计算机程序设计操作对象（研究逻辑机构，存储结构，算法）</p><h3 id="🧩-生活中的数据结构（先理解再记忆）">🧩 生活中的数据结构（先理解再记忆）</h3><ul><li><strong>图书馆管理</strong>：书籍按照索引号（逻辑结构）存储在不同书架（存储结构）</li><li><strong>快递分拣</strong>：包裹按地区（分类）、货架类型（存储方式）、扫码查询（操作算法）</li><li><strong>手机通讯录</strong>：姓名排序（线性结构） vs 微信好友分组（树形结构）</li></ul><h3 id="💡-专业术语解读">💡 专业术语解读</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 术语         | 相当于现实中的...          | 示例说明                   |</span><br><span class="line">|--------------|---------------------------|---------------------------|</span><br><span class="line">| 数据元素      | 独立物品                  | 一本具体的书/一条快递记录 |</span><br><span class="line">| 数据项       | 物品属性                  | 书名/ISBN号/价格          |</span><br><span class="line">| 数据对象     | 同类元素集合              | 所有计算机类书籍          |</span><br></pre></td></tr></table></figure><hr><h4 id="A-数据（data）：">A.数据（data）：</h4><p>数据是客观事物符号的表示，（能输入计算机，计算机可处理的符号总称）</p><h4 id="B-数据元素（data-element）：">B.数据元素（data element）：</h4><p>数据的基本单位，也成为结点或记录或顶点</p><p>数据元素（一个）可以有多个或者若干个数据项（data item）组成</p><h4 id="C-数据项（data-item）：">C.数据项（data item）：</h4><p>数据项是数据处理的最小单位</p><p>数据项（data item）是数据不可再分的最小单位，如学生信息记录中的学号、姓名等。</p><h4 id="D-数据对象-data-object">D.数据对象(data object):</h4><p>数据对象（data object）是性质相同的数据元素的集合，是数据的一个子集。</p><p>（数据对象是讨论数据集合的抽象，是数据的一个子集。数据对象中的数据元素必须具有相同的特性，即属于同一个数据类型。）</p><h4 id="e．数据结构（data-structure）">e．数据结构（data structure）:</h4><p>数据结构（data structure）是相互之间存在一种或多种特定关系的数据元素的集合，它指的是数据元素之间的相互关系，即数据的组织形式。</p><h2 id="🧠-1-2-数据结构三要素">🧠 1.2 数据结构三要素</h2><p>a.数据的逻辑结构</p><p>b.数据的物理结构</p><p>c.数据的运算及实现</p><h3 id="🌳-逻辑结构（用户视角）">🌳 逻辑结构（用户视角）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    A[逻辑结构] </span><br><span class="line">    A --&gt; B[线性结构]</span><br><span class="line">    A --&gt; C[非线性结构]</span><br><span class="line">    C --&gt; A1[树]</span><br><span class="line">    C --&gt; A2[图]</span><br><span class="line">    C --&gt; E[集合]</span><br><span class="line"> B --&gt; B1[线性表]</span><br><span class="line"> B --&gt; B2[栈]</span><br><span class="line"> B --&gt; B3[队列]</span><br><span class="line"> B --&gt; B4[串]</span><br><span class="line"> B --&gt; B5[数组]</span><br><span class="line"> B --&gt; B6[广义表]</span><br></pre></td></tr></table></figure><h3 id=""></h3><h3 id="🧱-存储结构（计算机视角）">🧱 存储结构（计算机视角）</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> <span class="strong">**顺序存储**</span>：数组式排列 ✨</span><br><span class="line"><span class="bullet">   -</span> 特点：元素连续存储，可通过索引直接访问</span><br><span class="line"><span class="bullet">   -</span> 优劣：访问快但插入删除开销大</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> <span class="strong">**链式存储**</span>：寻宝图模式 🔗</span><br><span class="line"><span class="bullet">   -</span> 特点：通过指针链接元素</span><br><span class="line"><span class="bullet">   -</span> 优劣：动态扩展方便但占用额外空间</span><br><span class="line"><span class="bullet">3.</span> <span class="strong">**索引存储**</span>：快递驿站扫码查包裹 🔗</span><br><span class="line"><span class="bullet">   -</span> 特点：索引项包含关键字 + 物理地址</span><br><span class="line"><span class="bullet">   -</span> 优劣：快速定位 + 支持范围查询</span><br><span class="line"><span class="bullet">4.</span> <span class="strong">**散例存储**</span>：凭取件码直取快递 🔗</span><br><span class="line"><span class="bullet">   -</span> 特点：</span><br><span class="line"><span class="bullet">   -</span> 优劣：</span><br></pre></td></tr></table></figure><hr><table><thead><tr><th><strong>存储方式</strong></th><th>典型应用</th><th>访问速度</th><th>空间成本</th><th>适用场景</th></tr></thead><tbody><tr><td>顺序存储</td><td>数组/矩阵</td><td>★★★★☆</td><td>低</td><td>频繁随机访问</td></tr><tr><td>链式存储</td><td>链表/树结构</td><td>★★☆☆☆</td><td>中</td><td>动态数据增减</td></tr><tr><td>索引存储</td><td>数据库索引</td><td>★★★☆☆</td><td>高</td><td>快速检索+范围查询</td></tr><tr><td>散列存储</td><td>哈希表/缓存系统</td><td>★★★★★</td><td>可变</td><td>快速精确查找</td></tr></tbody></table><p>注：★★★★★表示最优，★数量减少表示性能递减</p><h2 id="⚙️-1-3-算法分析核心">⚙️ 1.3 算法分析核心</h2><h3 id="🎯-算法五大要素（BAT面试易考点）">🎯 算法五大要素（BAT面试易考点）</h3><ol><li><strong>确定性</strong> → 同输入必然同输出</li><li><strong>可行性</strong> → 能通过计算机实现</li><li><strong>有穷性</strong> → 不能死循环（注意与程序的区别）</li><li><strong>输入输出</strong> → 至少一个输出</li></ol><h3 id="📈-复杂度分析诀窍">📈 复杂度分析诀窍</h3><h4 id="时间增长模型（关键口诀）">时间增长模型（关键口诀）</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n²) &lt; O(2ⁿ)</span><br></pre></td></tr></table></figure><h4 id="常见复杂度场景">常见复杂度场景</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 🧠 复杂度等级实战案例</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">O_1_demo</span>(<span class="params">arr</span>):           <span class="comment"># 常量级：哈希表查询</span></span><br><span class="line">    <span class="keyword">return</span> arr[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">O_logn_demo</span>(<span class="params">n</span>):          <span class="comment"># 对数级：二分查找</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">1</span>:</span><br><span class="line">        n = n//<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">O_n_demo</span>(<span class="params">n</span>):             <span class="comment"># 线性级：单层循环</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">O_n2_demo</span>(<span class="params">n</span>):            <span class="comment"># 平方级：冒泡排序</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            a = i + j</span><br></pre></td></tr></table></figure><h4 id="✨-复杂度计算技巧表">✨ 复杂度计算技巧表</h4><table><thead><tr><th>代码模式</th><th>时间复杂度</th><th>示例</th></tr></thead><tbody><tr><td>简单语句</td><td>O(1)</td><td>a = b + c</td></tr><tr><td>单层循环</td><td>O(n)</td><td>for(i=0;i&lt;n;i++)</td></tr><tr><td>嵌套循环 (两重)</td><td>O(n²)</td><td>冒泡排序核心代码</td></tr><tr><td>递归调用（二分）</td><td>O(logn)</td><td>二叉树查找</td></tr><tr><td>递归调用（非平衡）</td><td>O(n)</td><td>链表遍历</td></tr></tbody></table><hr><h2 id="🔑-1-4-学习方法建议">🔑 1.4 学习方法建议</h2><h3 id="💡-三点学习哲学">💡 三点学习哲学</h3><ol><li><strong>多画图解</strong> → 绘制数据结构形态演变图</li><li><strong>手写代码</strong> → 关键操作在纸上模拟执行</li><li><strong>对比记忆</strong> → 对比不同结构的CRUD复杂度</li></ol><h3 id="🛠️-动手实验建议">🛠️ 动手实验建议</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 实验1：用扑克牌模拟栈的入栈/出栈</span><br><span class="line"><span class="bullet">-</span> 实验2：用收纳盒做顺序存储 VS 行李箱做链式存储</span><br><span class="line"><span class="bullet">-</span> 实验3：给家庭成员画二叉树（父母结点/孩子结点）</span><br></pre></td></tr></table></figure><hr><h2 id="📌-本章小结">📌 本章小结</h2><p>✅ 数据结构 = 逻辑结构 + 存储结构 + 运算<br>✅ 算法优劣关键看时间/空间复杂度<br>✅ 分析复杂度要抓主要矛盾</p><center>  <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d963b9006ce84ba2983a76c2c8a9dc3d~tplv-k3u1fbpfcp-watermark.image" width="400" alt="复杂度增长趋势图"></center>```<p>注：以上内容完整支持Markdown语法，可直接导入Obsidian/Notion等笔记软件，思维导图需支持Mermaid的编辑器查看。练习题目配套代码已整合核心知识要点。</p>]]></content>
    
    
    <summary type="html">数据结构第一章绪论</summary>
    
    
    
    <category term="数据结构" scheme="https://lxttz.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构绪论" scheme="https://lxttz.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%AA%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>简单的springboot+vue笔记入门</title>
    <link href="https://lxttz.github.io/posts/5ef8f3d3.html"/>
    <id>https://lxttz.github.io/posts/5ef8f3d3.html</id>
    <published>2025-02-27T13:37:44.000Z</published>
    <updated>2025-02-27T14:00:22.912Z</updated>
    
    <content type="html"><![CDATA[<h3 id="🤖-Assistant">🤖 Assistant</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 🌿 SpringBoot + Vue 全栈开发指南</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 📚 目录</span></span><br><span class="line"><span class="bullet">1.</span> [<span class="string">环境准备</span>](<span class="link">#-环境准备</span>)  </span><br><span class="line"><span class="bullet">2.</span> [<span class="string">前后端项目创建</span>](<span class="link">#-前后端项目创建</span>)  </span><br><span class="line"><span class="bullet">3.</span> [<span class="string">SpringBoot基础接口开发</span>](<span class="link">#-springboot基础接口开发</span>)  </span><br><span class="line"><span class="bullet">4.</span> [<span class="string">Vue前端基础搭建</span>](<span class="link">#-vue前端基础搭建</span>)  </span><br><span class="line"><span class="bullet">5.</span> [<span class="string">前后端联调实战</span>](<span class="link">#-前后端联调实战</span>)  </span><br><span class="line"><span class="bullet">6.</span> [<span class="string">数据库整合</span>](<span class="link">#-数据库整合</span>)  </span><br><span class="line"><span class="bullet">7.</span> [<span class="string">项目打包部署</span>](<span class="link">#-项目打包部署</span>)  </span><br><span class="line"><span class="bullet">8.</span> [<span class="string">实战：图书管理系统</span>](<span class="link">#-实战项目</span>)  </span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="section">## 🔧 环境准备</span></span><br><span class="line"><span class="section">### 必备工具清单</span></span><br><span class="line">| 工具              | 用途                      | 下载地址                                |</span><br><span class="line">|-------------------|---------------------------|----------------------------------------|</span><br><span class="line">| <span class="strong">**JDK 17+**</span>       | Java开发环境              | [<span class="string">Oracle JDK</span>](<span class="link">https://www.oracle.com/java/</span>) |</span><br><span class="line">| <span class="strong">**Node.js 18+**</span>   | Vue运行环境               | [<span class="string">Node.js</span>](<span class="link">https://nodejs.org/</span>)         |</span><br><span class="line">| <span class="strong">**Maven 3.6+**</span>    | 项目管理工具              | [<span class="string">Maven</span>](<span class="link">https://maven.apache.org/</span>)     |</span><br><span class="line">| <span class="strong">**VS Code**</span>       | 前端开发IDE               | [<span class="string">VS Code</span>](<span class="link">https://code.visualstudio.com/</span>) |</span><br><span class="line">| <span class="strong">**IntelliJ IDEA**</span> | 后端开发IDE               | [<span class="string">IDEA</span>](<span class="link">https://www.jetbrains.com/idea/</span>) |</span><br><span class="line"></span><br><span class="line"><span class="section">### 环境验证</span></span><br><span class="line"><span class="code">```bash</span></span><br><span class="line"><span class="code"># 检查Java环境</span></span><br><span class="line"><span class="code">java -version</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 检查Node环境</span></span><br><span class="line"><span class="code">node -v  </span></span><br><span class="line"><span class="code">npm -v</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"># 检查Maven</span></span><br><span class="line"><span class="code">mvn -v</span></span><br></pre></td></tr></table></figure><hr><h2 id="🛠️-前后端项目创建">🛠️ 前后端项目创建</h2><h3 id="后端SpringBoot项目">后端SpringBoot项目</h3><ol><li><p><strong>通过Spring Initializr创建</strong><br>访问 <a href="https://start.spring.io">start.spring.io</a>，选择：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Project</span><span class="punctuation">:</span> <span class="string">Maven  </span></span><br><span class="line"><span class="attribute">Language</span><span class="punctuation">:</span> <span class="string">Java  </span></span><br><span class="line"><span class="attribute">Spring Boot</span><span class="punctuation">:</span> <span class="string">3.2.x  </span></span><br><span class="line"><span class="attribute">Dependencies</span><span class="punctuation">:</span> <span class="string">Spring Web, Lombok</span></span><br></pre></td></tr></table></figure></li><li><p><strong>项目结构</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">src/</span><br><span class="line">  main/</span><br><span class="line">    java/</span><br><span class="line">      com/example/bookstore/</span><br><span class="line">        BookstoreApplication.java  <span class="comment"># 启动类</span></span><br><span class="line">    resources/</span><br><span class="line">      application.properties</span><br></pre></td></tr></table></figure></li></ol><h3 id="前端Vue项目">前端Vue项目</h3><ol><li><p><strong>使用Vue脚手架创建</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli  </span><br><span class="line">vue create book-frontend  </span><br><span class="line"><span class="comment"># 选择默认配置（Vue 3 + babel）</span></span><br></pre></td></tr></table></figure></li><li><p><strong>项目结构</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">src/</span><br><span class="line">  assets/       <span class="comment"># 静态资源</span></span><br><span class="line">  components/   <span class="comment"># 组件</span></span><br><span class="line">  router/       <span class="comment"># 路由</span></span><br><span class="line">  views/        <span class="comment"># 页面</span></span><br><span class="line">  App.vue       <span class="comment"># 根组件</span></span><br><span class="line">  main.js       <span class="comment"># 入口文件</span></span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="📡-SpringBoot基础接口开发">📡 SpringBoot基础接口开发</h2><h3 id="1-编写RESTful接口">1. 编写RESTful接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getBooks</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">1</span>, <span class="string">&quot;Spring Boot实战&quot;</span>, <span class="string">&quot;王五&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="number">2</span>, <span class="string">&quot;Vue3指南&quot;</span>, <span class="string">&quot;李四&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">addBook</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> book; <span class="comment">// 模拟保存操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-跨域配置（关键！）">2. 跨域配置（关键！）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WebMvcConfigurer <span class="title function_">corsConfigurer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebMvcConfigurer</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">                registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                        .allowedOrigins(<span class="string">&quot;http://localhost:8080&quot;</span>) <span class="comment">// Vue默认端口</span></span><br><span class="line">                        .allowedMethods(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="🎨-Vue前端基础搭建">🎨 Vue前端基础搭建</h2><h3 id="1-安装必要依赖">1. 安装必要依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios vue-router@4 --save</span><br></pre></td></tr></table></figure><h3 id="2-配置axios实例">2. 配置axios实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/utils/request.js</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;http://localhost:8081/api&#x27;</span>, <span class="comment">// SpringBoot端口</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service;</span><br></pre></td></tr></table></figure><h3 id="3-调用接口示例">3. 调用接口示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, onMounted &#125; from &#x27;vue&#x27;;</span><br><span class="line">import request from &#x27;@/utils/request&#x27;;</span><br><span class="line"></span><br><span class="line">const books = ref([]);</span><br><span class="line"></span><br><span class="line">onMounted(async () =&gt; &#123;</span><br><span class="line">  const res = await request.get(&#x27;/books&#x27;);</span><br><span class="line">  books.value = res.data;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="🔌-前后端联调实战">🔌 前后端联调实战</h2><h3 id="联调流程">联调流程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">  A[Vue前端] --&gt;|发送请求| B(SpringBoot后端)</span><br><span class="line">  B --&gt;|返回JSON数据| A</span><br><span class="line">  A --&gt;|渲染数据| C[浏览器]</span><br></pre></td></tr></table></figure><h3 id="常见问题解决">常见问题解决</h3><ol><li><p><strong>跨域问题</strong></p><ul><li>确认后端已配置CORS</li><li>检查请求端口号是否正确</li></ul></li><li><p><strong>404错误</strong></p><ul><li>确认后端接口路径与前端请求路径一致</li><li>查看SpringBoot控制台是否注册了对应接口</li></ul></li></ol><hr><h2 id="🗃️-数据库整合">🗃️ 数据库整合</h2><h3 id="1-集成MyBatis-Plus">1. 集成MyBatis-Plus</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- pom.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.33<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-数据库配置">2. 数据库配置</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># application.properties</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/book_db?useSSL=false</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><hr><h2 id="📦-项目打包部署">📦 项目打包部署</h2><h3 id="前端打包">前端打包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build  <span class="comment"># 生成dist目录</span></span><br></pre></td></tr></table></figure><h3 id="后端整合静态资源">后端整合静态资源</h3><ol><li>将<code>dist</code>目录内容复制到<code>src/main/resources/static</code></li><li>修改SpringBoot配置：<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.web.resources.static-locations</span>=<span class="string">classpath:/static/</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="打包运行">打包运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package</span><br><span class="line">java -jar target/bookstore-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><hr><h2 id="🎯-实战项目：图书管理系统">🎯 实战项目：图书管理系统</h2><h3 id="功能模块">功能模块</h3><ul><li>图书列表展示 📚</li><li>添加/编辑图书 ✏️</li><li>删除图书 🗑️</li><li>模糊搜索 🔍</li></ul><h3 id="技术亮点">技术亮点</h3><table><thead><tr><th>模块</th><th>技术点</th></tr></thead><tbody><tr><td><strong>前端</strong></td><td>Vue3 + Element Plus + Axios</td></tr><tr><td><strong>后端</strong></td><td>SpringBoot + MyBatis-Plus</td></tr><tr><td><strong>认证</strong></td><td>JWT令牌验证</td></tr><tr><td><strong>部署</strong></td><td>Docker容器化</td></tr></tbody></table><h3 id="效果预览">效果预览</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- BookList.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-table :data=&quot;books&quot;&gt;</span><br><span class="line">    &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">    &lt;el-table-column prop=&quot;title&quot; label=&quot;书名&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">    &lt;el-table-column prop=&quot;author&quot; label=&quot;作者&quot;&gt;&lt;/el-table-column&gt;</span><br><span class="line">  &lt;/el-table&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><blockquote><p>💡 <strong>提示</strong>：建议从基础CRUD功能开始，逐步添加搜索、分页等高级功能，通过实际调试加深理解！<br>🚧 <strong>常见问题</strong>：接口报500错误时，优先检查后端控制台日志，前端通过开发者工具查看网络请求详情。</p></blockquote><pre><code>![效果示意图](https://via.placeholder.com/800x400.png?text=图书管理系统界面预览)</code></pre>]]></content>
    
    
    <summary type="html">SpringBoot + Vue 全栈开发指南</summary>
    
    
    
    <category term="框架" scheme="https://lxttz.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="spring" scheme="https://lxttz.github.io/categories/%E6%A1%86%E6%9E%B6/spring/"/>
    
    <category term="vue" scheme="https://lxttz.github.io/categories/%E6%A1%86%E6%9E%B6/spring/vue/"/>
    
    
    <category term="springboot+vuue" scheme="https://lxttz.github.io/tags/springboot-vuue/"/>
    
  </entry>
  
  <entry>
    <title>简单的springboot笔记入门</title>
    <link href="https://lxttz.github.io/posts/9a991e5c.html"/>
    <id>https://lxttz.github.io/posts/9a991e5c.html</id>
    <published>2025-02-27T13:34:42.000Z</published>
    <updated>2025-02-27T13:52:02.418Z</updated>
    
    <content type="html"><![CDATA[<h3 id="🤖-Assistant">🤖 Assistant</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 🌱 SpringBoot 从零入门详解笔记</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 📚 目录</span></span><br><span class="line"><span class="bullet">1.</span> [<span class="string">环境准备</span>](<span class="link">#-环境准备</span>)</span><br><span class="line"><span class="bullet">2.</span> [<span class="string">第一个SpringBoot程序</span>](<span class="link">#-第一个springboot程序</span>)</span><br><span class="line"><span class="bullet">3.</span> [<span class="string">核心功能详解</span>](<span class="link">#-核心功能详解</span>)</span><br><span class="line"><span class="bullet">4.</span> [<span class="string">Web开发实践</span>](<span class="link">#-web开发实践</span>)</span><br><span class="line"><span class="bullet">5.</span> [<span class="string">数据库操作</span>](<span class="link">#-数据库操作</span>)</span><br><span class="line"><span class="bullet">6.</span> [<span class="string">项目打包部署</span>](<span class="link">#-项目打包部署</span>)</span><br><span class="line"><span class="bullet">7.</span> [<span class="string">实战：学生管理系统</span>](<span class="link">#-实战项目</span>)</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="section">## 🔧 环境准备</span></span><br><span class="line"><span class="section">### 1. 必备工具</span></span><br><span class="line"><span class="bullet">-</span> <span class="strong">**JDK 17+**</span> [<span class="string">下载地址</span>](<span class="link">https://www.oracle.com/java/</span>)</span><br><span class="line"><span class="bullet">-</span> <span class="strong">**Maven 3.6+**</span> [<span class="string">下载地址</span>](<span class="link">https://maven.apache.org/</span>)</span><br><span class="line"><span class="bullet">-</span> <span class="strong">**IntelliJ IDEA**</span> (推荐) 或 Eclipse</span><br><span class="line"></span><br><span class="line"><span class="section">### 2. 快速验证环境</span></span><br><span class="line"><span class="code">```bash</span></span><br><span class="line"><span class="code">java -version</span></span><br><span class="line"><span class="code">mvn -v</span></span><br></pre></td></tr></table></figure><hr><h2 id="🚀-第一个SpringBoot程序">🚀 第一个SpringBoot程序</h2><h3 id="1-通过脚手架创建项目">1. 通过脚手架创建项目</h3><p>访问 <a href="https://start.spring.io">start.spring.io</a> 配置：</p><ul><li>Project: Maven</li><li>Language: Java</li><li>Spring Boot: 3.x</li><li>勾选 <strong>Spring Web</strong></li><li>生成并下载压缩包</li></ul><h3 id="2-项目结构说明">2. 项目结构说明</h3><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">src<span class="symbol">/</span></span><br><span class="line">  main<span class="symbol">/</span></span><br><span class="line">    java<span class="symbol">/</span></span><br><span class="line">      com<span class="operator">/</span>example<span class="operator">/</span>demo<span class="symbol">/</span></span><br><span class="line">        DemoApplication.java  <span class="comment"># 主启动类</span></span><br><span class="line">    resources<span class="symbol">/</span></span><br><span class="line">      application.properties  <span class="comment"># 配置文件</span></span><br></pre></td></tr></table></figure><h3 id="3-编写第一个接口">3. 编写第一个接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello SpringBoot! 🎉&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-启动应用">4. 启动应用</h3><ul><li>运行 <code>DemoApplication</code> 中的 main 方法</li><li>访问 <a href="http://localhost:8080/hello">http://localhost:8080/hello</a></li></ul><hr><h2 id="💡-核心功能详解">💡 核心功能详解</h2><h3 id="1-自动配置原理">1. 自动配置原理</h3><ul><li>通过 <code>@SpringBootApplication</code> 开启自动配置</li><li>查看自动配置报告：<code>management.endpoints.web.exposure.include=*</code></li></ul><h3 id="2-配置文件">2. 配置文件</h3><p><code>application.yml</code> 示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8888</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">my-first-boot</span></span><br></pre></td></tr></table></figure><h3 id="3-常用注解速查">3. 常用注解速查</h3><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td><code>@RestController</code></td><td>组合@Controller+@ResponseBody</td></tr><tr><td><code>@RequestMapping</code></td><td>映射请求路径</td></tr><tr><td><code>@Autowired</code></td><td>自动依赖注入</td></tr><tr><td><code>@Configuration</code></td><td>声明配置类</td></tr></tbody></table><hr><h2 id="🌍-Web开发实践">🌍 Web开发实践</h2><h3 id="1-参数接收">1. 参数接收</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id, </span></span><br><span class="line"><span class="params">                    <span class="meta">@RequestParam</span> String name)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(id, name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-统一响应格式">2. 统一响应格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 成功静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Result&lt;T&gt; <span class="title function_">success</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;&gt;(<span class="number">200</span>, <span class="string">&quot;成功&quot;</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-异常处理">3. 异常处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">handleException</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.error(<span class="number">500</span>, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="🗃️-数据库操作">🗃️ 数据库操作</h2><h3 id="1-整合MyBatis">1. 整合MyBatis</h3><ol><li>添加依赖：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>配置数据源：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><hr><h2 id="📦-项目打包部署">📦 项目打包部署</h2><h3 id="1-打包为JAR">1. 打包为JAR</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure><h3 id="2-运行项目">2. 运行项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar target/demo-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure><hr><h2 id="🎯-实战项目：学生管理系统">🎯 实战项目：学生管理系统</h2><p><strong>功能列表</strong>：</p><ul><li>学生信息增删改查</li><li>分页查询</li><li>数据校验</li><li>Swagger接口文档</li></ul><p><strong>技术栈</strong>：</p><ul><li>Spring Boot 3.x</li><li>MyBatis-Plus</li><li>MySQL</li><li>Lombok</li><li>Spring Validation</li></ul><pre><code>&gt; 💡 提示：本笔记建议配合实际编码练习，学习效果最佳！建议从简单CRUD开始逐步增加功能模块。</code></pre>]]></content>
    
    
    <summary type="html">SpringBoot 从零入门详解笔记，环境准备，第一个SpringBoot程序，核心功能详解，Web开发实践</summary>
    
    
    
    <category term="springboot" scheme="https://lxttz.github.io/categories/springboot/"/>
    
    <category term="框架" scheme="https://lxttz.github.io/categories/springboot/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="简单入门" scheme="https://lxttz.github.io/categories/springboot/%E6%A1%86%E6%9E%B6/%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/"/>
    
    
    <category term="springboot" scheme="https://lxttz.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>简单的java笔记入门</title>
    <link href="https://lxttz.github.io/posts/24f09506.html"/>
    <id>https://lxttz.github.io/posts/24f09506.html</id>
    <published>2025-02-27T13:25:36.000Z</published>
    <updated>2025-02-27T14:01:07.619Z</updated>
    
    <content type="html"><![CDATA[<h3 id="🤖-Assistant">🤖 Assistant</h3><h1>🚀 Java 零基础全面指南</h1><h2 id="🌟-Java-是什么？">🌟 Java 是什么？</h2><ul><li><strong>Java</strong> 是一种跨平台、面向对象的编程语言</li><li>特点：<strong>简单</strong>、<strong>健壮</strong>、<strong>安全</strong>、<strong>高性能</strong></li><li>应用领域：Web 开发、Android 开发、大数据、企业级应用</li><li>运行环境：JVM（Java 虚拟机）</li></ul><hr><h2 id="📦-Java-开发环境">📦 Java 开发环境</h2><h3 id="1-安装-JDK">1. 安装 JDK</h3><ul><li>JDK（Java Development Kit）：Java 开发工具包</li><li>下载地址：<a href="https://www.oracle.com/java/technologies/javase-jdk11-downloads.html">Oracle JDK</a></li><li>安装步骤：<ol><li>下载 JDK 安装包</li><li>运行安装程序，按提示安装</li><li>配置环境变量（JAVA_HOME、PATH）</li></ol></li></ul><h3 id="2-验证安装">2. 验证安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br><span class="line">javac -version</span><br></pre></td></tr></table></figure><hr><h2 id="🧩-Java-基础语法">🧩 Java 基础语法</h2><h3 id="1-Hello-World-程序">1. Hello World 程序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-数据类型">2. 数据类型</h3><table><thead><tr><th>类型</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>byte</td><td><code>byte a = 10;</code></td><td>8位整数</td></tr><tr><td>short</td><td><code>short b = 100;</code></td><td>16位整数</td></tr><tr><td>int</td><td><code>int c = 1000;</code></td><td>32位整数</td></tr><tr><td>long</td><td><code>long d = 10000L;</code></td><td>64位整数</td></tr><tr><td>float</td><td><code>float e = 3.14f;</code></td><td>32位浮点数</td></tr><tr><td>double</td><td><code>double f = 3.14;</code></td><td>64位浮点数</td></tr><tr><td>char</td><td><code>char g = 'A';</code></td><td>单个字符</td></tr><tr><td>boolean</td><td><code>boolean h = true;</code></td><td>布尔值</td></tr></tbody></table><h3 id="3-变量与常量">3. 变量与常量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">20</span>;          <span class="comment">// 变量</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14</span>; <span class="comment">// 常量</span></span><br></pre></td></tr></table></figure><hr><h2 id="🛠️-控制流">🛠️ 控制流</h2><h3 id="1-条件语句">1. 条件语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">85</span>;</span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;合格&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;不及格&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-循环语句">2. 循环语句</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for 循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// while 循环</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">while</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    System.out.println(count--);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// do-while 循环</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    System.out.println(num++);</span><br><span class="line">&#125; <span class="keyword">while</span> (num &lt;= <span class="number">3</span>);</span><br></pre></td></tr></table></figure><hr><h2 id="🧱-面向对象编程（OOP）">🧱 面向对象编程（OOP）</h2><h3 id="1-类与对象">1. 类与对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;你好，我是&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p1.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">p1.age = <span class="number">20</span>;</span><br><span class="line">p1.sayHello();</span><br></pre></td></tr></table></figure><h3 id="2-构造方法">2. 构造方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    Person(String name, <span class="type">int</span> age) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Person</span> <span class="variable">p2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">25</span>);</span><br></pre></td></tr></table></figure><h3 id="3-继承">3. 继承</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String school;</span><br><span class="line"></span><br><span class="line">    Student(String name, <span class="type">int</span> age, String school) &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">        <span class="built_in">this</span>.school = school;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王五&quot;</span>, <span class="number">18</span>, <span class="string">&quot;清华大学&quot;</span>);</span><br></pre></td></tr></table></figure><hr><h2 id="📚-集合框架">📚 集合框架</h2><h3 id="1-List">1. List</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;苹果&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;香蕉&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;橘子&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String fruit : list) &#123;</span><br><span class="line">    System.out.println(fruit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Set">2. Set</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line">Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">set.add(<span class="string">&quot;苹果&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;香蕉&quot;</span>);</span><br><span class="line">set.add(<span class="string">&quot;苹果&quot;</span>); <span class="comment">// 重复元素不会添加</span></span><br><span class="line"></span><br><span class="line">System.out.println(set);</span><br></pre></td></tr></table></figure><h3 id="3-Map">3. Map</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line">Map&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;苹果&quot;</span>, <span class="number">5</span>);</span><br><span class="line">map.put(<span class="string">&quot;香蕉&quot;</span>, <span class="number">3</span>);</span><br><span class="line">map.put(<span class="string">&quot;橘子&quot;</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(map.get(<span class="string">&quot;苹果&quot;</span>));</span><br></pre></td></tr></table></figure><hr><h2 id="🛠️-异常处理">🛠️ 异常处理</h2><h3 id="1-try-catch">1. try-catch</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;除数不能为0&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-finally">2. finally</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">    arr[<span class="number">10</span>] = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;数组越界&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;无论是否异常，都会执行&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="🌐-文件操作">🌐 文件操作</h2><h3 id="1-读取文件">1. 读取文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(file);</span><br><span class="line"><span class="keyword">while</span> (scanner.hasNextLine()) &#123;</span><br><span class="line">    System.out.println(scanner.nextLine());</span><br><span class="line">&#125;</span><br><span class="line">scanner.close();</span><br></pre></td></tr></table></figure><h3 id="2-写入文件">2. 写入文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"></span><br><span class="line"><span class="type">FileWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;output.txt&quot;</span>);</span><br><span class="line">writer.write(<span class="string">&quot;Hello, Java!&quot;</span>);</span><br><span class="line">writer.close();</span><br></pre></td></tr></table></figure><hr><h2 id="🚀-常用工具类">🚀 常用工具类</h2><h3 id="1-String">1. String</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello, Java!&quot;</span>;</span><br><span class="line">System.out.println(str.length());</span><br><span class="line">System.out.println(str.substring(<span class="number">7</span>));</span><br><span class="line">System.out.println(str.contains(<span class="string">&quot;Java&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="2-Math">2. Math</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Math.max(<span class="number">10</span>, <span class="number">20</span>));</span><br><span class="line">System.out.println(Math.sqrt(<span class="number">25</span>));</span><br><span class="line">System.out.println(Math.random());</span><br></pre></td></tr></table></figure><hr><h2 id="📚-学习路径建议">📚 学习路径建议</h2><ol><li><strong>基础语法</strong>（变量、控制流、循环）</li><li><strong>面向对象编程</strong>（类与对象、继承、多态）</li><li><strong>集合框架</strong>（List、Set、Map）</li><li><strong>异常处理</strong>（try-catch-finally）</li><li><strong>文件操作</strong>（读写文件）</li><li><strong>高级特性</strong>（多线程、网络编程、反射等）</li></ol><blockquote><p>Java 是一门强大的语言，学习过程中需要多动手实践，建议从简单的控制台程序开始，逐步深入理解 Java 的核心特性和应用场景！💪</p></blockquote><pre><code></code></pre>]]></content>
    
    
    <summary type="html">Java是一种跨平台、面向对象的编程语言</summary>
    
    
    
    <category term="后端" scheme="https://lxttz.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="编程语言" scheme="https://lxttz.github.io/categories/%E5%90%8E%E7%AB%AF/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    <category term="简单入门" scheme="https://lxttz.github.io/categories/%E5%90%8E%E7%AB%AF/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/"/>
    
    
    <category term="java" scheme="https://lxttz.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>简单的Javaweb笔记入门</title>
    <link href="https://lxttz.github.io/posts/638cfe72.html"/>
    <id>https://lxttz.github.io/posts/638cfe72.html</id>
    <published>2025-02-27T13:11:55.000Z</published>
    <updated>2025-02-27T14:01:50.873Z</updated>
    
    <content type="html"><![CDATA[<h3 id="🤖-Assistant">🤖 Assistant</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 🚀 JavaWeb 从零入门指南</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 📚 前置知识要求</span></span><br><span class="line"><span class="bullet">-</span> Java 基础语法</span><br><span class="line"><span class="bullet">-</span> HTML/CSS 基础</span><br><span class="line"><span class="bullet">-</span> 数据库基础（SQL）</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="section">## ⚙️ 第一章：环境搭建</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 1.1 📦 JDK安装</span></span><br><span class="line"><span class="code">```bash</span></span><br><span class="line"><span class="code">1. 官网下载JDK 8+ </span></span><br><span class="line"><span class="code">2. 配置环境变量：</span></span><br><span class="line"><span class="code">   - JAVA_HOME：C:\Program Files\Java\jdk1.8.0_301</span></span><br><span class="line"><span class="code">   - Path添加：%JAVA_HOME%\bin</span></span><br><span class="line"><span class="code">3. 验证：终端输入 java -version</span></span><br></pre></td></tr></table></figure><h3 id="1-2-🐈-Tomcat安装">1.2 🐈 Tomcat安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 下载Tomcat 9.x</span><br><span class="line">2. 解压到无中文路径</span><br><span class="line">3. 启动：bin/startup.bat</span><br><span class="line">4. 验证：访问 http://localhost:8080</span><br></pre></td></tr></table></figure><h3 id="1-3-💡-IDEA配置">1.3 💡 IDEA配置</h3><ol><li>创建Java Web项目<ul><li>New Project → Java Enterprise</li><li>勾选 Web Application</li></ul></li><li>集成Tomcat<ul><li>Edit Configurations → Add Tomcat Server</li></ul></li></ol><hr><h2 id="🌐-第二章：Servlet基础">🌐 第二章：Servlet基础</h2><h3 id="2-1-🛠️-第一个Servlet">2.1 🛠️ 第一个Servlet</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span><br><span class="line">        <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        response.getWriter().print(<span class="string">&quot;Hello JavaWeb!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-⚡-Servlet生命周期">2.2 ⚡ Servlet生命周期</h3><table><thead><tr><th>方法</th><th>调用时机</th><th>执行次数</th></tr></thead><tbody><tr><td>init()</td><td>第一次请求时</td><td>1</td></tr><tr><td>service()</td><td>每次请求时</td><td>N</td></tr><tr><td>destroy()</td><td>服务器关闭时</td><td>1</td></tr></tbody></table><hr><h2 id="🎨-第三章：JSP技术">🎨 第三章：JSP技术</h2><h3 id="3-1-📝-JSP基础语法">3.1 📝 JSP基础语法</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%-- JSP注释 --%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> %&gt; </span><br><span class="line"></span><br><span class="line">&lt;%! <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>; %&gt;  <span class="comment">// 声明</span></span><br><span class="line">&lt;%= <span class="keyword">new</span> <span class="title class_">Date</span>() %&gt;      <span class="comment">// 表达式</span></span><br><span class="line">&lt;% count++; %&gt;         <span class="comment">// 脚本</span></span><br></pre></td></tr></table></figure><h3 id="3-2-🌈-JSP内置对象">3.2 🌈 JSP内置对象</h3><table><thead><tr><th>对象名</th><th>类型</th><th>作用域</th></tr></thead><tbody><tr><td>request</td><td>HttpServletRequest</td><td>请求作用域</td></tr><tr><td>session</td><td>HttpSession</td><td>会话作用域</td></tr><tr><td>application</td><td>ServletContext</td><td>应用作用域</td></tr></tbody></table><hr><h2 id="🛢️-第四章：JDBC数据库操作">🛢️ 第四章：JDBC数据库操作</h2><h3 id="4-1-🔌-数据库连接">4.1 🔌 数据库连接</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> DriverManager.getConnection(</span><br><span class="line">    <span class="string">&quot;jdbc:mysql://localhost:3306/mydb?useSSL=false&quot;</span>, </span><br><span class="line">    <span class="string">&quot;root&quot;</span>, </span><br><span class="line">    <span class="string">&quot;123456&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="4-2-🛡️-PreparedStatement防SQL注入">4.2 🛡️ PreparedStatement防SQL注入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM users WHERE username = ? AND password = ?&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">pstmt.setString(<span class="number">1</span>, username);</span><br><span class="line">pstmt.setString(<span class="number">2</span>, password);</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> pstmt.executeQuery();</span><br></pre></td></tr></table></figure><hr><h2 id="🧩-第五章：MVC开发模式">🧩 第五章：MVC开发模式</h2><h3 id="5-1-🏗️-MVC分层架构">5.1 🏗️ MVC分层架构</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">📁 项目结构</span><br><span class="line">├── <span class="attribute">src</span>/<span class="selector-tag">main</span>/java</span><br><span class="line">│   ├── controller  (C)</span><br><span class="line">│   ├── service     (M)</span><br><span class="line">│   └── dao         (M)</span><br><span class="line">└── <span class="attribute">src</span>/<span class="selector-tag">main</span>/webapp </span><br><span class="line">    └── WEB-INF </span><br><span class="line">        └── views   (V)</span><br></pre></td></tr></table></figure><hr><h2 id="🔥-第六章：项目实战-用户管理系统">🔥 第六章：项目实战-用户管理系统</h2><h3 id="6-1-📋-功能需求">6.1 📋 功能需求</h3><ul><li>用户注册/登录</li><li>用户信息CRUD</li><li>数据分页展示</li></ul><h3 id="6-2-🧬-实现步骤">6.2 🧬 实现步骤</h3><ol><li>创建数据库表 users</li><li>编写实体类 User</li><li>实现DAO层（数据库操作）</li><li>开发Service层（业务逻辑）</li><li>创建Controller处理请求</li><li>制作JSP视图页面</li></ol><hr><h2 id="🚧-常见问题解决">🚧 常见问题解决</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">❓ 中文乱码</span><br><span class="line">💡 解决方案：</span><br><span class="line"><span class="bullet">1.</span> 设置过滤器 CharacterEncodingFilter</span><br><span class="line"><span class="bullet">2.</span> response.setContentType(&quot;text/html;charset=utf-8&quot;);</span><br><span class="line"><span class="bullet">3.</span> tomcat配置URIEncoding=&quot;UTF-8&quot;</span><br><span class="line"></span><br><span class="line">❓ 404错误</span><br><span class="line">💡 检查路径：</span><br><span class="line"><span class="bullet">1.</span> URL是否正确</span><br><span class="line"><span class="bullet">2.</span> @WebServlet注解配置</span><br><span class="line"><span class="bullet">3.</span> web.xml配置（如需）</span><br></pre></td></tr></table></figure><hr><h2 id="🌟-扩展知识">🌟 扩展知识</h2><ul><li>过滤器（Filter）</li><li>监听器（Listener）</li><li>Ajax交互</li><li>SpringMVC框架整合</li><li>MyBatis持久层框架</li></ul><hr><blockquote><p>📌 <strong>学习建议</strong><br>学习路线：Servlet → JSP → JDBC → MVC → 整合框架<br>推荐工具：Postman（接口测试）、Navicat（数据库管理）</p></blockquote><p>📚 推荐书籍：</p><ul><li>《Head First Servlets and JSP》</li><li>《Java Web整合开发王者归来》</li></ul><pre><code></code></pre>]]></content>
    
    
    <summary type="html">Java 基础语法，HTML/CSS 基础，数据库基础（SQL）</summary>
    
    
    
    <category term="Javaweb" scheme="https://lxttz.github.io/categories/Javaweb/"/>
    
    <category term="简单入门" scheme="https://lxttz.github.io/categories/Javaweb/%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/"/>
    
    
    <category term="javaweb" scheme="https://lxttz.github.io/tags/javaweb/"/>
    
  </entry>
  
  <entry>
    <title>简单的vue笔记入门</title>
    <link href="https://lxttz.github.io/posts/e832593c.html"/>
    <id>https://lxttz.github.io/posts/e832593c.html</id>
    <published>2025-02-27T12:58:15.000Z</published>
    <updated>2025-02-27T13:13:32.861Z</updated>
    
    <content type="html"><![CDATA[<h3 id="🤖-Assistant">🤖 Assistant</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 🚀 Vue.js 零基础全面指南</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 🌟 什么是 Vue.js？</span></span><br><span class="line"><span class="bullet">-</span> <span class="strong">**Vue.js**</span> 是一个用于构建用户界面的渐进式 JavaScript 框架</span><br><span class="line"><span class="bullet">-</span> 特点：<span class="strong">**轻量**</span>、<span class="strong">**易学**</span>、<span class="strong">**高效**</span>、<span class="strong">**灵活**</span></span><br><span class="line"><span class="bullet">-</span> 核心概念：<span class="strong">**组件化**</span>、<span class="strong">**数据驱动**</span>、<span class="strong">**响应式**</span></span><br><span class="line"><span class="bullet">-</span> 适用于从小型项目到大型应用的开发</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="section">## 📦 Vue 基础</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 1. Vue 的引入方式</span></span><br><span class="line"><span class="bullet">-</span> CDN 引入（适用于快速学习）</span><br><span class="line">  <span class="code">```html</span></span><br><span class="line"><span class="code">  &lt;script src=&quot;https://unpkg.com/vue@3&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><ul><li>项目化引入（推荐）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue@next</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-创建第一个-Vue-应用">2. 创建第一个 Vue 应用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>: <span class="string">&quot;Hello Vue!&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript">  app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="🧩-Vue-核心概念">🧩 Vue 核心概念</h2><h3 id="1-模板语法">1. 模板语法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 插值表达式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 指令 v-bind --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 指令 v-on --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;sayHi&quot;</span>&gt;</span>点击我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 指令 v-model --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-响应式数据">2. 响应式数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&quot;Hello Vue!&quot;</span>,</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&quot;https://vuejs.org&quot;</span>,</span><br><span class="line">      <span class="attr">username</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&quot;Hi, &quot;</span> + <span class="variable language_">this</span>.<span class="property">username</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="🛠️-Vue-组件化">🛠️ Vue 组件化</h2><h3 id="1-组件定义">1. 组件定义</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局组件</span></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;my-component&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;div&gt;这是我的组件&lt;/div&gt;`</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-组件使用">2. 组件使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-局部组件">3. 局部组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">LocalComponent</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`&lt;div&gt;这是局部组件&lt;/div&gt;`</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;local-component&#x27;</span>: <span class="title class_">LocalComponent</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="🎨-Vue-单文件组件（SFC）">🎨 Vue 单文件组件（SFC）</h2><h3 id="1-文件结构">1. 文件结构</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MyComponent.vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increaseCount&quot;</span>&gt;</span>点击 &#123;&#123; count &#125;&#125; 次<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">title</span>: <span class="string">&quot;我的组件&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">count</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">increaseCount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">count</span>++;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-使用单文件组件">2. 使用单文件组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">MyComponent</span> <span class="keyword">from</span> <span class="string">&#x27;./MyComponent.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">MyComponent</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="🔗-Vue-常用指令">🔗 Vue 常用指令</h2><h3 id="1-条件渲染">1. 条件渲染</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>显示内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>隐藏内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-列表渲染">2. 列表渲染</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-双向绑定">3. 双向绑定</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;inputText&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>输入内容：&#123;&#123; inputText &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="🛠️-Vue-CLI-项目搭建">🛠️ Vue CLI 项目搭建</h2><h3 id="1-安装-Vue-CLI">1. 安装 Vue CLI</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><h3 id="2-创建项目">2. 创建项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create my-project</span><br></pre></td></tr></table></figure><h3 id="3-项目结构">3. 项目结构</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">my-project/</span><br><span class="line">├── public/             # 静态资源</span><br><span class="line">├── src/</span><br><span class="line">│   ├── assets/         # 图片、字体等</span><br><span class="line">│   ├── components/     # 组件</span><br><span class="line">│   ├── App.vue         # 根组件</span><br><span class="line">│   └── main.js         # 入口文件</span><br><span class="line">└── package.json        # 项目配置</span><br></pre></td></tr></table></figure><hr><h2 id="🌐-Vue-Router（路由管理）">🌐 Vue Router（路由管理）</h2><h3 id="1-安装-Vue-Router">1. 安装 Vue Router</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router</span><br></pre></td></tr></table></figure><h3 id="2-配置路由">2. 配置路由</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./views/Home.vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;./views/About.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>, <span class="attr">component</span>: <span class="title class_">About</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(),</span><br><span class="line">  routes</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-使用路由">3. 使用路由</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="🔄-Vuex（状态管理）">🔄 Vuex（状态管理）</h2><h3 id="1-安装-Vuex">1. 安装 Vuex</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex</span><br></pre></td></tr></table></figure><h3 id="2-创建-Store">2. 创建 Store</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      state.<span class="property">count</span>++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params">&#123; commit &#125;</span>) &#123;</span><br><span class="line">      <span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-使用-Store">3. 使用 Store</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;increment&#x27;</span>);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">count</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="📚-学习路径建议">📚 学习路径建议</h2><ol><li><strong>基础语法</strong>（模板语法、指令、组件化）</li><li><strong>单文件组件</strong>（SFC 开发模式）</li><li><strong>Vue CLI</strong>（项目化开发、工具链）</li><li><strong>Vue Router</strong>（路由管理）</li><li><strong>Vuex</strong>（全局状态管理）</li><li><strong>生态扩展</strong>（Axios、Vite、Nuxt.js 等）</li></ol><blockquote><p>Vue 的学习需要大量的实践，建议从一个小项目开始（如 Todo List），逐步深入理解框架的核心思想和最佳实践！💪</p></blockquote><pre><code></code></pre>]]></content>
    
    
    <summary type="html">Vue.js是一个用于构建用户界面的渐进式 JavaScript 框架特点：轻量、易学、高效、灵活核心概念：组件化、数据驱动、响应式适用于从小型项目到大型应用的开发</summary>
    
    
    
    <category term="前端" scheme="https://lxttz.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="框架" scheme="https://lxttz.github.io/categories/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/"/>
    
    <category term="vue" scheme="https://lxttz.github.io/categories/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/vue/"/>
    
    <category term="简单入门" scheme="https://lxttz.github.io/categories/%E5%89%8D%E7%AB%AF/%E6%A1%86%E6%9E%B6/vue/%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/"/>
    
    
    <category term="vue" scheme="https://lxttz.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>简单的Javascript笔记入门</title>
    <link href="https://lxttz.github.io/posts/dc13357a.html"/>
    <id>https://lxttz.github.io/posts/dc13357a.html</id>
    <published>2025-02-27T12:38:07.000Z</published>
    <updated>2025-02-27T13:05:52.850Z</updated>
    
    <content type="html"><![CDATA[<h3 id="🤖-Assistant">🤖 Assistant</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 🚀 JavaScript 零基础全面指南</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 🌟 JavaScript 是什么？</span></span><br><span class="line"><span class="bullet">-</span> <span class="strong">**JS**</span> 是一种运行在浏览器的脚本语言</span><br><span class="line"><span class="bullet">-</span> 为网页添加<span class="strong">**交互行为**</span>（点击效果、数据验证、动态内容）</span><br><span class="line"><span class="bullet">-</span> <span class="strong">**三要素分工**</span>：HTML（结构）、CSS（样式）、JS（行为）</span><br><span class="line"><span class="bullet">-</span> 文件扩展名 <span class="code">`.js`</span>（如 <span class="code">`script.js`</span>）</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="section">## 📦 引入方式</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 1. 内部脚本（直接写在HTML中）</span></span><br><span class="line"><span class="code">```html</span></span><br><span class="line"><span class="code">&lt;script&gt;</span></span><br><span class="line"><span class="code">  alert(&quot;Hello World!&quot;);</span></span><br><span class="line"><span class="code">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-外部脚本（推荐）">2. 外部脚本（推荐）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;script.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> <span class="comment">&lt;!-- 放在body末尾 --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-行内脚本（少用）">3. 行内脚本（少用）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;点击成功!&#x27;)&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="🔧-基础语法">🔧 基础语法</h2><h3 id="1-变量声明">1. 变量声明</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">25</span>;           <span class="comment">// 可重新赋值</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span>;        <span class="comment">// 常量（不可变）</span></span><br><span class="line"><span class="keyword">var</span> oldVar = <span class="string">&quot;不推荐&quot;</span>;  <span class="comment">// 旧方式（存在作用域问题）</span></span><br></pre></td></tr></table></figure><h3 id="2-数据类型">2. 数据类型</h3><table><thead><tr><th>类型</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>String</td><td><code>&quot;Hello&quot;</code>, <code>'你好'</code></td><td>文本型数据</td></tr><tr><td>Number</td><td><code>12</code>, <code>3.14</code></td><td>所有数字统一为Number</td></tr><tr><td>Boolean</td><td><code>true</code>, <code>false</code></td><td>布尔值</td></tr><tr><td>Array</td><td><code>[1, 2, 3]</code></td><td>数组</td></tr><tr><td>Object</td><td><code>&#123;name: &quot;小明&quot;&#125;</code></td><td>对象</td></tr><tr><td>Undefined</td><td><code>let a;</code></td><td>未定义的变量</td></tr><tr><td>Null</td><td><code>let b = null;</code></td><td>空值</td></tr></tbody></table><h3 id="3-运算符">3. 运算符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 算术运算符</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">10</span> + <span class="number">5</span>;   <span class="comment">// + - * / %</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较运算符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span> &gt; <span class="number">3</span>); <span class="comment">// &gt; &lt; &gt;= &lt;= == ===（全等）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 逻辑运算符</span></span><br><span class="line">isValid &amp;&amp; <span class="title function_">showAlert</span>(); <span class="comment">// &amp;&amp;（与）||（或）!（非）</span></span><br></pre></td></tr></table></figure><hr><h2 id="🧩-流程控制">🧩 流程控制</h2><h3 id="1-条件判断">1. 条件判断</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// if...else</span></span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">90</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;合格&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;不及格&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三元运算符</span></span><br><span class="line"><span class="keyword">let</span> result = (age &gt;= <span class="number">18</span>) ? <span class="string">&quot;成年&quot;</span> : <span class="string">&quot;未成年&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="2-循环结构">2. 循环结构</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// 0,1,2,3,4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// while循环</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">while</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(count--);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for...of（遍历数组）</span></span><br><span class="line"><span class="keyword">let</span> fruits = [<span class="string">&quot;苹果&quot;</span>, <span class="string">&quot;香蕉&quot;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> fruit <span class="keyword">of</span> fruits) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(fruit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="🛠-函数与作用域">🛠 函数与作用域</h2><h3 id="1-函数定义">1. 函数定义</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`你好，<span class="subst">$&#123;name&#125;</span>!`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数（ES6）</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br></pre></td></tr></table></figure><h3 id="2-作用域原理（快递柜比喻）">2. 作用域原理（快递柜比喻）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable language_">global</span> = <span class="string">&quot;全局快递柜&quot;</span>; <span class="comment">// 全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> local = <span class="string">&quot;本地快递柜&quot;</span>; <span class="comment">// 局部变量</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">global</span>); <span class="comment">// ✔️ 可以使用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(local);    <span class="comment">// ❌ 无法访问</span></span><br></pre></td></tr></table></figure><hr><h2 id="🎯-DOM-操作（网页操控）">🎯 DOM 操作（网页操控）</h2><h3 id="1-获取元素">1. 获取元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常用选择器</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;header&quot;</span>);   <span class="comment">// ID选择</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.btn&quot;</span>);      <span class="comment">// CSS选择器选中第一个</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;p&quot;</span>);      <span class="comment">// 选中所有p标签</span></span><br></pre></td></tr></table></figure><h3 id="2-修改内容">2. 修改内容</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> title = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#title&quot;</span>);</span><br><span class="line">title.<span class="property">textContent</span> = <span class="string">&quot;新标题&quot;</span>;      <span class="comment">// 修改文本</span></span><br><span class="line">title.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;red&quot;</span>;         <span class="comment">// 修改样式</span></span><br><span class="line">title.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;active&quot;</span>);     <span class="comment">// 添加类名</span></span><br></pre></td></tr></table></figure><h3 id="3-创建-删除元素">3. 创建/删除元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建新元素</span></span><br><span class="line"><span class="keyword">let</span> newDiv = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">newDiv.<span class="property">textContent</span> = <span class="string">&quot;我是新增的&quot;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(newDiv);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除元素</span></span><br><span class="line"><span class="keyword">let</span> oldDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#old&quot;</span>);</span><br><span class="line">oldDiv.<span class="title function_">remove</span>();</span><br></pre></td></tr></table></figure><hr><h2 id="🎮-事件监听（交互核心）">🎮 事件监听（交互核心）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击事件</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#btn&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;按钮被点击了！&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表单提交</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#form&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;submit&quot;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  e.<span class="title function_">preventDefault</span>(); <span class="comment">// 阻止默认提交</span></span><br><span class="line">  <span class="title function_">processFormData</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常见事件类型：mouseover, keydown, scroll 等</span></span><br></pre></td></tr></table></figure><hr><h2 id="🔄-异步编程">🔄 异步编程</h2><h3 id="1-回调函数（Callback）">1. 回调函数（Callback）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;3秒后执行&quot;</span>);</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h3 id="2-Promise（承诺模式）">2. Promise（承诺模式）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (success) &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;成功的数据&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&quot;失败原因&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-async-await（终极方案）">3. async/await（终极方案）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&quot;api/data&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;请求失败&quot;</span>, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="🌈-ES6-重要特性">🌈 ES6+ 重要特性</h2><h3 id="1-模板字符串">1. 模板字符串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;小明&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`大家好，我是<span class="subst">$&#123;name&#125;</span>`</span>); <span class="comment">// 支持换行和变量</span></span><br></pre></td></tr></table></figure><h3 id="2-解构赋值">2. 解构赋值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组解构</span></span><br><span class="line"><span class="keyword">let</span> [a, b] = [<span class="number">10</span>, <span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象解构</span></span><br><span class="line"><span class="keyword">let</span> &#123;name, age&#125; = &#123;<span class="attr">name</span>: <span class="string">&quot;小明&quot;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-模块化">3. 模块化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// math.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">PI</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./math.js&#x27;</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="📱-综合案例：TODO-清单">📱 综合案例：TODO 清单</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HTML需配合有输入框和列表</span></span><br><span class="line"><span class="keyword">const</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#todo-input&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> addBtn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#add-btn&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> list = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#todo-list&quot;</span>);</span><br><span class="line"></span><br><span class="line">addBtn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (input.<span class="property">value</span>.<span class="title function_">trim</span>() === <span class="string">&quot;&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">  li.<span class="property">textContent</span> = input.<span class="property">value</span>;</span><br><span class="line">  li.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    li.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&quot;completed&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> deleteBtn = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">  deleteBtn.<span class="property">textContent</span> = <span class="string">&quot;移除&quot;</span>;</span><br><span class="line">  deleteBtn.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> li.<span class="title function_">remove</span>());</span><br><span class="line">  </span><br><span class="line">  li.<span class="title function_">appendChild</span>(deleteBtn);</span><br><span class="line">  list.<span class="title function_">appendChild</span>(li);</span><br><span class="line">  input.<span class="property">value</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h2 id="🚀-学习建议">🚀 学习建议</h2><ol><li><strong>优先掌握基础语法</strong>（不要急于学框架）</li><li><strong>多使用浏览器Console调试</strong>（F12直接写代码测试）</li><li><strong>从简单交互开始实践</strong>（轮播图、表单验证等）</li><li><strong>阅读优秀开源代码</strong>（GitHub找小型项目学习）</li><li><strong>关注现代JS新特性</strong>（ES6+文档常备）</li></ol><blockquote><p>JavaScript的灵活性既是优点也是挑战，遇到报错时仔细阅读控制台信息，坚持积累项目经验是突破的关键！💪</p></blockquote><pre><code>**附：学习路线推荐**  基础语法 → DOM操作 → ES6特性 → AJAX/异步 → NodeJS基础 → Vue/React框架</code></pre>]]></content>
    
    
    <summary type="html">JS 是一种运行在浏览器的脚本语言，为网页添加交互行为（点击效果、数据验证、动态内容）三要素分工**：HTML（结构）、CSS（样式）、JS（行为） 文件扩展名 `.js`（如 `script.js`）</summary>
    
    
    
    <category term="前端" scheme="https://lxttz.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="html" scheme="https://lxttz.github.io/categories/%E5%89%8D%E7%AB%AF/html/"/>
    
    <category term="简单入门" scheme="https://lxttz.github.io/categories/%E5%89%8D%E7%AB%AF/html/%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/"/>
    
    
    <category term="Javascript" scheme="https://lxttz.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>简单的css笔记入门</title>
    <link href="https://lxttz.github.io/posts/73f74a49.html"/>
    <id>https://lxttz.github.io/posts/73f74a49.html</id>
    <published>2025-02-27T12:37:48.000Z</published>
    <updated>2025-02-27T13:21:38.655Z</updated>
    
    <content type="html"><![CDATA[<h3 id="🤖-Assistant">🤖 Assistant</h3><h1>🎨 CSS 零基础完全指南</h1><h2 id="🌟-CSS-是什么？">🌟 CSS 是什么？</h2><ul><li><strong>CSS</strong>（Cascading Style Sheets）：层叠样式表</li><li>控制网页的<strong>外观表现</strong>（如颜色、布局、字体）</li><li>HTML负责结构，CSS负责美化（类似毛坯房 + 装修）</li><li>文件扩展名 <code>.css</code>（如 <code>style.css</code>）</li></ul><hr><h2 id="📦-CSS-三种引入方式">📦 CSS 三种引入方式</h2><h3 id="1-内联样式（直接写在标签里）">1. 内联样式（直接写在标签里）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>红色文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-内部样式表（写在-style-标签中）">2. 内部样式表（写在 <code>&lt;style&gt;</code> 标签中）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-外部样式表（最常用，单独写-css文件）">3. 外部样式表（最常用，单独写.css文件）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在head中链接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="🔍-CSS-选择器">🔍 CSS 选择器</h2><h3 id="1-基础选择器">1. 基础选择器</h3><table><thead><tr><th>选择器</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>元素选择器</td><td><code>p &#123; ... &#125;</code></td><td>选择所有 <code>&lt;p&gt;</code> 标签</td></tr><tr><td>类选择器</td><td><code>.box &#123; ... &#125;</code></td><td>选择所有 <code>class=&quot;box&quot;</code> 的元素</td></tr><tr><td>ID选择器</td><td><code>#header &#123; ... &#125;</code></td><td>选择 <code>id=&quot;header&quot;</code> 的元素</td></tr><tr><td>通配符选择器</td><td><code>* &#123; ... &#125;</code></td><td>选择页面所有元素</td></tr></tbody></table><h3 id="2-组合选择器">2. 组合选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 后代选择器 */</span></span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">p</span> &#123; ... &#125;        <span class="comment">/* div里的所有p标签 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 子元素选择器 */</span></span><br><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">span</span> &#123; ... &#125;   <span class="comment">/* div的直接子span */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 相邻兄弟选择器 */</span></span><br><span class="line"><span class="selector-tag">h1</span> + <span class="selector-tag">p</span> &#123; ... &#125;       <span class="comment">/* 紧跟在h1后的第一个p */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 群组选择器 */</span></span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span> &#123; ... &#125;   <span class="comment">/* 同时选择多个元素 */</span></span><br></pre></td></tr></table></figure><h3 id="3-伪类-伪元素">3. 伪类 &amp; 伪元素</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 伪类 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123; ... &#125;      <span class="comment">/* 鼠标悬停时 */</span></span><br><span class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123; ... &#125;  <span class="comment">/* 第二个li元素 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 伪元素 */</span></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::first-letter</span> &#123; ... &#125;  <span class="comment">/* 段落的首字母 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::after</span> &#123; <span class="attribute">content</span>: <span class="string">&quot;▶&quot;</span>; &#125; <span class="comment">/* 在div后添加内容 */</span></span><br></pre></td></tr></table></figure><hr><h2 id="📐-盒模型（快递盒子理论）">📐 盒模型（快递盒子理论）</h2><p><img src="https://www.w3schools.com/css/box-model.png" alt="盒模型"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;      <span class="comment">/* 内容区宽度 */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;     <span class="comment">/* 内容区高度 */</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;     <span class="comment">/* 内边距（填充物厚度） */</span></span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#000</span>; <span class="comment">/* 边框（外壳） */</span></span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">30px</span>;      <span class="comment">/* 外边距（盒子间距） */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="盒模型切换">盒模型切换</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-sizing</span>: content-box;  <span class="comment">/* 默认（总宽度 = width+padding+border） */</span></span><br><span class="line"><span class="attribute">box-sizing</span>: border-box;   <span class="comment">/* 推荐！总宽度 = width（包括padding和border） */</span></span><br></pre></td></tr></table></figure><hr><h2 id="🎯-常用CSS属性">🎯 常用CSS属性</h2><h3 id="1-文本样式">1. 文本样式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff0000</span>;              <span class="comment">/* 文本颜色 */</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;             <span class="comment">/* 字体大小 */</span></span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;Microsoft Yahei&quot;</span>, Arial; <span class="comment">/* 字体 */</span></span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;            <span class="comment">/* 行高 */</span></span><br><span class="line">  <span class="attribute">text-align</span>: center;          <span class="comment">/* 对齐方式 */</span></span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;  <span class="comment">/* 下划线/删除线 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-背景样式">2. 背景样式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f0f0f0</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;bg.jpg&quot;</span>);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;      <span class="comment">/* 背景图覆盖整个区域 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-布局属性">3. 布局属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 显示模式 */</span></span><br><span class="line"><span class="attribute">display</span>: block;     <span class="comment">/* 块级元素（独占一行） */</span></span><br><span class="line"><span class="attribute">display</span>: inline;    <span class="comment">/* 行内元素（不换行） */</span></span><br><span class="line"><span class="attribute">display</span>: inline-block; <span class="comment">/* 行内块（可设置宽高） */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 定位方式 */</span></span><br><span class="line"><span class="attribute">position</span>: static;   <span class="comment">/* 默认 */</span></span><br><span class="line"><span class="attribute">position</span>: relative; <span class="comment">/* 相对定位（参照自身位置） */</span></span><br><span class="line"><span class="attribute">position</span>: absolute; <span class="comment">/* 绝对定位（参照最近定位父级） */</span></span><br><span class="line"><span class="attribute">position</span>: fixed;    <span class="comment">/* 固定定位（参照浏览器窗口） */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Flex布局（重点！） */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center; <span class="comment">/* 水平对齐 */</span></span><br><span class="line">  <span class="attribute">align-items</span>: center;     <span class="comment">/* 垂直对齐 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="🌀-Flex-布局速查表">🌀 Flex 布局速查表</h2><h3 id="容器属性">容器属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex-direction</span>: row;          <span class="comment">/* 主轴方向（row/column） */</span></span><br><span class="line"><span class="attribute">flex-wrap</span>: wrap;              <span class="comment">/* 是否换行 */</span></span><br><span class="line"><span class="attribute">justify-content</span>: space-between; <span class="comment">/* 主轴对齐方式 */</span></span><br><span class="line"><span class="attribute">align-items</span>: center;          <span class="comment">/* 交叉轴对齐 */</span></span><br><span class="line"><span class="attribute">gap</span>: <span class="number">20px</span>;                    <span class="comment">/* 项目间距 */</span></span><br></pre></td></tr></table></figure><h3 id="项目属性">项目属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">flex</span>: <span class="number">1</span>;                      <span class="comment">/* 分配剩余空间 */</span></span><br><span class="line"><span class="attribute">align-self</span>: flex-start;       <span class="comment">/* 单独设置对齐 */</span></span><br><span class="line"><span class="attribute">order</span>: <span class="number">2</span>;                     <span class="comment">/* 排列顺序 */</span></span><br></pre></td></tr></table></figure><hr><h2 id="📱-响应式设计（媒体查询）">📱 响应式设计（媒体查询）</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 当屏幕宽度小于600px时 */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>; </span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 屏幕方向检测 */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">orientation</span>: portrait) &#123; <span class="comment">/* 竖屏 */</span> &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="🌈-CSS-进阶特性">🌈 CSS 进阶特性</h2><h3 id="1-过渡动画">1. 过渡动画</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;  <span class="comment">/* 属性 | 时间 | 速度曲线 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-关键帧动画">2. 关键帧动画</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> slide &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123; <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>); &#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123; <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">200px</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: slide <span class="number">2s</span> infinite alternate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-CSS-变量">3. CSS 变量</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--main-color</span>: <span class="number">#4285f4</span>;      <span class="comment">/* 定义变量 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--main-color); <span class="comment">/* 使用变量 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="🛠️-综合案例：个人主页美化">🛠️ 综合案例：个人主页美化</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* style.css */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;Arial&#x27;</span>, sans-serif;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>, <span class="number">#2196F3</span>, <span class="number">#E91E63</span>);</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2rem</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.profile-img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">15px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.grid-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.grid-container</span> &#123;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="🚀-最佳实践建议">🚀 最佳实践建议</h2><ol><li>使用<strong>语义化类名</strong>（如 <code>.nav-link</code> 而非 <code>.blue-text</code>）</li><li>遵循<strong>移动优先原则</strong>（先写移动端样式，再用媒体查询适配大屏）</li><li>善用开发者工具调试（按F12，实时调整样式）</li><li>保持代码整洁（使用CSS预处理器如Sass/Less）</li><li>学习使用CSS框架（Bootstrap/Tailwind CSS）</li></ol><blockquote><p>CSS的学习需要大量练习，尝试模仿优秀的网页设计，并亲手调试每个样式属感受变化！✨</p></blockquote><pre><code></code></pre>]]></content>
    
    
    <summary type="html">CSS（Cascading Style Sheets）层叠样式表控制网页的外观表现（如颜色、布局、字体）HTML负责结构，CSS负责美化（类似毛坯房 + 装修）文件扩展名 `.css`（如 `style.css`）</summary>
    
    
    
    <category term="前端" scheme="https://lxttz.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="css" scheme="https://lxttz.github.io/categories/%E5%89%8D%E7%AB%AF/css/"/>
    
    <category term="简单入门" scheme="https://lxttz.github.io/categories/%E5%89%8D%E7%AB%AF/css/%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/"/>
    
    
    <category term="css" scheme="https://lxttz.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>简单的html笔记入门</title>
    <link href="https://lxttz.github.io/posts/ba13f65e.html"/>
    <id>https://lxttz.github.io/posts/ba13f65e.html</id>
    <published>2025-02-27T12:37:06.000Z</published>
    <updated>2025-02-27T13:06:20.544Z</updated>
    
    <content type="html"><![CDATA[<h3 id="🤖-Assistant">🤖 Assistant</h3><h1>🔖 HTML 零基础详细笔记</h1><h2 id="🌟-什么是-HTML？">🌟 什么是 HTML？</h2><ul><li><strong>HTML</strong>（HyperText Markup Language）：超文本标记语言</li><li>用于构建网页结构和内容（类似盖房的“钢架结构”）</li><li>由一系列的<strong>标签</strong>（tags）组成，如 <code>&lt;h1&gt;</code>, <code>&lt;p&gt;</code> 等</li><li>必须用 <code>.html</code> 后缀保存（如 <code>index.html</code>）</li></ul><hr><h2 id="🏗️-基础文档结构">🏗️ 基础文档结构</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span>          <span class="comment">&lt;!-- 声明文档类型为 HTML5 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span>      <span class="comment">&lt;!-- 根标签，lang定义语言 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span>                 <span class="comment">&lt;!-- 头：存放元数据（不显示在网页） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span>           <span class="comment">&lt;!-- 字符编码方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>第一个网页<span class="tag">&lt;/<span class="name">title</span>&gt;</span>      <span class="comment">&lt;!-- 网页标题（显示在标签页） --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>                 <span class="comment">&lt;!-- 身体：显示内容区域 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 内容写在这里 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="📌-常见-HTML-元素">📌 常见 HTML 元素</h2><h3 id="1-标题与段落">1. 标题与段落</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>   <span class="comment">&lt;!-- 最大标题，重要程度逐级递减 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span>    <span class="comment">&lt;!-- 段落文本 --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-链接与图片">2. 链接与图片</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.example.com&quot;</span>&gt;</span>点我跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="comment">&lt;!-- 超链接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;图片路径.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片描述&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">  src: 图片路径（本地或网络） </span></span><br><span class="line"><span class="comment">  alt: 图片加载失败时显示的替代文本</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-列表">3. 列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 无序列表（●符号列表） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 有序列表（数字序号） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>第一步<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>第二步<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-表格">4. 表格</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span>   <span class="comment">&lt;!-- border: 表格边框 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span>               <span class="comment">&lt;!-- 表格行 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span>    <span class="comment">&lt;!-- 表头单元格（加粗居中） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span>    <span class="comment">&lt;!-- 普通单元格 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>25<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-表单（重点！）">5. 表单（重点！）</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/submit&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 文本输入框 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 密码框 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>密码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 单选按钮 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span> 男</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span> 女</span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 复选框 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;reading&quot;</span>&gt;</span> 阅读</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;music&quot;</span>&gt;</span> 音乐</span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 下拉选择框 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;city&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;beijing&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shanghai&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 提交按钮 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="🧩-HTML5-语义化标签（更清晰的页面结构）">🧩 HTML5 语义化标签（更清晰的页面结构）</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span>网页头部（包含LOGO和导航）<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span>导航栏<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span>页面中的独立区块<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span>独立文章内容（如博客）<span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span>侧边栏内容<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span>网页脚部（版权信息）<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="🛠️-常用属性">🛠️ 常用属性</h2><table><thead><tr><th>属性</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td><code>class</code></td><td>定义元素的类（用于CSS样式）</td><td><code>&lt;div class=&quot;box&quot;&gt;</code></td></tr><tr><td><code>id</code></td><td>唯一标识（常用于JavaScript操作）</td><td><code>&lt;div id=&quot;header&quot;&gt;</code></td></tr><tr><td><code>style</code></td><td>内联样式（直接写CSS）</td><td><code>&lt;p style=&quot;color:red;&quot;&gt;</code></td></tr><tr><td><code>href</code></td><td>指定链接的URL</td><td><code>&lt;a href=&quot;about.html&quot;&gt;</code></td></tr><tr><td><code>src</code></td><td>资源路径（图片、视频等）</td><td><code>&lt;img src=&quot;cat.jpg&quot;&gt;</code></td></tr></tbody></table><hr><h2 id="🌈-综合案例">🌈 综合案例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>个人主页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>欢迎访问我的主页！👋<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#about&quot;</span>&gt;</span>关于我<span class="tag">&lt;/<span class="name">a</span>&gt;</span> |</span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#contact&quot;</span>&gt;</span>联系方式<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">&quot;about&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>自我介绍<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是小明，一个前端开发者<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;avatar.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;我的头像&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">&quot;contact&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>联系表单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入邮箱&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">placeholder</span>=<span class="string">&quot;留言...&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>© 2023 小明的主页<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="🚀-学习建议">🚀 学习建议</h2><ol><li>多动手写代码，尝试修改案例中的各个部分</li><li>使用浏览器开发者工具（F12）查看其他网站的HTML结构</li><li>结合CSS学习美化页面</li><li>后续可过渡到JavaScript为网页添加交互功能</li></ol><blockquote><p>记住：HTML是网页的骨架，不要急于追求样式，先打好基础！✨</p></blockquote><pre><code></code></pre>]]></content>
    
    
    <summary type="html">什么是 HTML（HyperText Markup Language）：超文本标记语言，用于构建网页结构和内容（类似盖房的“钢架结构”）</summary>
    
    
    
    <category term="前端" scheme="https://lxttz.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="html" scheme="https://lxttz.github.io/categories/%E5%89%8D%E7%AB%AF/html/"/>
    
    <category term="简单入门" scheme="https://lxttz.github.io/categories/%E5%89%8D%E7%AB%AF/html/%E7%AE%80%E5%8D%95%E5%85%A5%E9%97%A8/"/>
    
    
    <category term="html" scheme="https://lxttz.github.io/tags/html/"/>
    
  </entry>
  
</feed>
